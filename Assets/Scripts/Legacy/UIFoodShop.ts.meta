fileFormatVersion: 2
guid: 2d4c89c1a5947c848a2c7b9e9d02c8e2
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: '{"source":"// import {ZepetoScriptBehaviour} from ''ZEPETO.Script''\r\n//
    import {Button, Text} from ''UnityEngine.UI''\r\n// import {GameObject, Object,
    WaitUntil, WaitForSeconds} from ''UnityEngine''\r\n// import {ProductRecord,
    ProductService, ProductType, PurchaseType} from \"ZEPETO.Product\";\r\n// import
    {ZepetoWorldMultiplay} from \"ZEPETO.World\";\r\n// import {Room, RoomData} from
    \"ZEPETO.Multiplay\";\r\n// import UIBallances, {BalanceSync, Currency, InventoryAction,
    InventorySync} from \"./BalanceManager\";\r\n// import ItemManager from ''../ItemManager'';\r\n//
    export default class UIFoodShop extends ZepetoScriptBehaviour {\r\n//     @SerializeField()
    private allBtns: Button[] = [];\r\n//     @SerializeField() private gainBalanceBtn:
    Button;\r\n//     @SerializeField() private useBalanceBtn: Button;\r\n//    
    @SerializeField() private purchaseOfficialUIBtn: Button;\r\n//     @SerializeField()
    private purchaseImmediatelyBtn: Button;\r\n//     @SerializeField() private informationPref:
    GameObject;\r\n//     private _itemsCache: ProductRecord[] = [];\r\n//     private
    _itemsPackageCache: ProductRecord[] = []\r\n//     private _multiplay: ZepetoWorldMultiplay;\r\n//    
    private _room : Room;\r\n//     //private _uiBallances: UIBallances;\r\n//    
    private Start() {\r\n//         //this._multiplay = Object.FindObjectOfType<ZepetoWorldMultiplay>();\r\n//        
    //this._uiBallances = Object.FindObjectOfType<UIBallances>();\r\n//         //
    button Interval\r\n//         //let allBtns : Button[] = this.GetComponentsInChildren<Button>();\r\n//        
    this.allBtns.forEach(btn => btn.onClick.AddListener(() => this.StartCoroutine(this.BtnInterval(btn))));\r\n//        
    // this.StartCoroutine(this.LoadAllItems());\r\n//         this.InitMessageHandler();\r\n//        
    // this._multiplay.RoomJoined += (room: Room) => {\r\n//         //     this._room
    = room;\r\n//         //     this.InitMessageHandler();\r\n//         // }\r\n//    
    }\r\n//     private InitMessageHandler() {\r\n//         //button listener\r\n//        
    //this.gainBalanceBtn.onClick.AddListener(() => ItemManager.GetInstance().GainBalance(Currency.wak,
    1000));\r\n//         //this.useBalanceBtn.onClick.AddListener(() => ItemManager.GetInstance().UseBalance(Currency.wak,
    100));\r\n//         //sell items with id called potion1.\r\n//         this.purchaseImmediatelyBtn.onClick.AddListener(()
    => this.StartCoroutine(ItemManager.GetInstance().PurchaseItemImmediately(\"food_test\")));\r\n//        
    this.purchaseOfficialUIBtn.onClick.AddListener(() => {\r\n//             //The
    first non-consumable item is sold through the official ui.\r\n//            
    const nonConsumableItem = this._itemsCache.find(ir => ir.PurchaseType === PurchaseType.NonConsumable);\r\n//            
    if (nonConsumableItem) {\r\n//                 //ItemManager.GetInstance().PurchaseItem(nonConsumableItem);\r\n//            
    }\r\n//             else{\r\n//                 ItemManager.GetInstance().OpenInformation(`Non-consumable
    product does not exist.`);\r\n//             }\r\n//         });\r\n//        
    // log message handler\r\n//         // this._room.AddMessageHandler<BalanceSync>(\"SyncBalances\",
    (message) => {\r\n//         //     ItemManager.GetInstance().OpenInformation(`${message.currencyId}
    a Increase or decrease: ${message.quantity}`);\r\n//         // });\r\n//        
    // this._multiplay.Room.AddMessageHandler<InventorySync>(\"SyncInventories\",
    (message) => {\r\n//         //     ItemManager.GetInstance().OpenInformation(`${message.productId}
    has been ${InventoryAction[message.inventoryAction]} in the inventory.`);\r\n//        
    //     // item use sample\r\n//         //     /*if(message.inventoryAction ==
    InventoryAction.Used){\r\n//         //         if(message.productId == \"potion1\"){\r\n//        
    //             console.log(\"potion use!\");\r\n//         //         }\r\n//        
    //     }*/\r\n//         // });\r\n//         // this._room.AddMessageHandler<string>(\"DebitError\",
    (message) => {\r\n//         //     ItemManager.GetInstance().OpenInformation(message);\r\n//        
    // });\r\n//         // ProductService.OnPurchaseCompleted.AddListener((product,
    response) => {\r\n//         //     ItemManager.GetInstance().OpenInformation(`${response.productId}
    Purchase Completed`);\r\n//         // });\r\n//         // ProductService.OnPurchaseFailed.AddListener((product,
    response) => {\r\n//         //     ItemManager.GetInstance().OpenInformation(response.message);\r\n//        
    // });\r\n//     }\r\n//     // private* LoadAllItems() {\r\n//     //     const
    request = ProductService.GetProductsAsync();\r\n//     //     yield new WaitUntil(()
    => request.keepWaiting == false);\r\n//     //     if (request.responseData.isSuccess)
    {\r\n//     //         this._itemsCache = [];\r\n//     //         request.responseData.products.forEach((pr)
    => {\r\n//     //             if (pr.ProductType == ProductType.Item) {\r\n//    
    //                 this._itemsCache.push(pr);\r\n//     //             }\r\n//    
    //             if (pr.ProductType == ProductType.ItemPackage) {\r\n//     //                
    this._itemsPackageCache.push(pr);\r\n//     //             }\r\n//     //        
    });\r\n//     //         if (this._itemsCache.length == 0) {\r\n//     //            
    console.warn(\"no Item information\");\r\n//     //             return;\r\n//    
    //         }\r\n//     //     }\r\n//     //     else{\r\n//     //         console.warn(\"Product
    Load Failed\");\r\n//     //     }\r\n//     // }\r\n//     // private OpenInformation(message:string){\r\n//    
    //     //const inforObj = GameObject.Instantiate(this.informationPref,this.transform.parent)
    as GameObject;\r\n//     //     //inforObj.GetComponentInChildren<Text>().text
    = message;\r\n//     // }\r\n//     // // open offical ui\r\n//     // private
    OnClickPurchaseItem(productRecord: ProductRecord) {\r\n//     //     //ProductService.OpenPurchaseUI(productRecord);\r\n//    
    // }\r\n//     // private OnClickGainBalance(currencyId: string, quantity: number)
    {\r\n//     //     const data = new RoomData();\r\n//     //     data.Add(\"currencyId\",
    currencyId);\r\n//     //     data.Add(\"quantity\", quantity);\r\n//     //    
    this._multiplay.Room?.Send(\"onCredit\", data.GetObject());\r\n//     //    
    console.warn(\"OnClickGainBalance\");\r\n//     // }\r\n//     // private OnClickUseBalance(currencyId:
    string, quantity: number) {\r\n//     //     const data = new RoomData();\r\n//    
    //     data.Add(\"currencyId\", currencyId);\r\n//     //     data.Add(\"quantity\",
    quantity);\r\n//     //     this._multiplay.Room?.Send(\"onDebit\", data.GetObject());\r\n//    
    //     console.warn(\"OnClickUseBalance\");\r\n//     // }\r\n//     // an immediate
    purchase\r\n//     // private* OnClickPurchaseItemImmediately(productId: string)
    {\r\n//     //     const request = ProductService.PurchaseProductAsync(productId);\r\n//    
    //     yield new WaitUntil(() => request.keepWaiting == false);\r\n//     //    
    if (request.responseData.isSuccess) {\r\n//     //         // is purchase success\r\n//    
    //     } else {\r\n//     //         // is purchase fail\r\n//     //     }\r\n//    
    // }\r\n//     private * BtnInterval(btn:Button){\r\n//         btn.interactable
    = false;\r\n//         yield new WaitForSeconds(0.2);\r\n//         btn.interactable
    = true;\r\n//     }\r\n// }\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVUlGb29kU2hvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlVJRm9vZFNob3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBQ3RELDhDQUE4QztBQUM5Qyw0RUFBNEU7QUFDNUUsMkZBQTJGO0FBQzNGLHFEQUFxRDtBQUNyRCxtREFBbUQ7QUFDbkQsdUdBQXVHO0FBQ3ZHLDRDQUE0QztBQUU1QyxrRUFBa0U7QUFDbEUsd0RBQXdEO0FBQ3hELHdEQUF3RDtBQUN4RCx1REFBdUQ7QUFDdkQsK0RBQStEO0FBQy9ELGdFQUFnRTtBQUNoRSw2REFBNkQ7QUFFN0QsaURBQWlEO0FBQ2pELHVEQUF1RDtBQUN2RCxnREFBZ0Q7QUFDaEQsNEJBQTRCO0FBQzVCLDJDQUEyQztBQUUzQyx3QkFBd0I7QUFDeEIsK0VBQStFO0FBQy9FLHdFQUF3RTtBQUV4RSw2QkFBNkI7QUFDN0IsNkVBQTZFO0FBQzdFLGtIQUFrSDtBQUVsSCx1REFBdUQ7QUFDdkQscUNBQXFDO0FBQ3JDLDZEQUE2RDtBQUM3RCxvQ0FBb0M7QUFDcEMsNENBQTRDO0FBQzVDLGVBQWU7QUFDZixRQUFRO0FBRVIscUNBQXFDO0FBQ3JDLDRCQUE0QjtBQUM1QixzSEFBc0g7QUFDdEgsbUhBQW1IO0FBQ25ILCtDQUErQztBQUMvQyxzSkFBc0o7QUFDdEosaUVBQWlFO0FBQ2pFLCtFQUErRTtBQUMvRSxxSEFBcUg7QUFDckgsdUNBQXVDO0FBQ3ZDLCtFQUErRTtBQUMvRSxnQkFBZ0I7QUFDaEIsb0JBQW9CO0FBQ3BCLHVHQUF1RztBQUN2RyxnQkFBZ0I7QUFDaEIsY0FBYztBQUVkLGlDQUFpQztBQUNqQyxzRkFBc0Y7QUFDdEYsaUlBQWlJO0FBQ2pJLGlCQUFpQjtBQUNqQixxR0FBcUc7QUFDckcsMkpBQTJKO0FBQzNKLG9DQUFvQztBQUNwQyx3RUFBd0U7QUFDeEUseURBQXlEO0FBQ3pELHFEQUFxRDtBQUNyRCx1QkFBdUI7QUFDdkIscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQiwrRUFBK0U7QUFDL0UscUVBQXFFO0FBQ3JFLGlCQUFpQjtBQUNqQixxRkFBcUY7QUFDckYsd0dBQXdHO0FBQ3hHLGlCQUFpQjtBQUNqQixrRkFBa0Y7QUFDbEYsOEVBQThFO0FBQzlFLGlCQUFpQjtBQUNqQixRQUFRO0FBRVIsbUNBQW1DO0FBQ25DLGdFQUFnRTtBQUNoRSxzRUFBc0U7QUFDdEUsbURBQW1EO0FBQ25ELHdDQUF3QztBQUN4QyxpRUFBaUU7QUFDakUsK0RBQStEO0FBQy9ELG9EQUFvRDtBQUNwRCx1QkFBdUI7QUFDdkIsc0VBQXNFO0FBQ3RFLDJEQUEyRDtBQUMzRCx1QkFBdUI7QUFDdkIscUJBQXFCO0FBRXJCLHFEQUFxRDtBQUNyRCwwREFBMEQ7QUFDMUQsNkJBQTZCO0FBQzdCLG1CQUFtQjtBQUNuQixlQUFlO0FBQ2YsbUJBQW1CO0FBQ25CLHNEQUFzRDtBQUN0RCxlQUFlO0FBQ2YsV0FBVztBQUVYLGtEQUFrRDtBQUNsRCxrSEFBa0g7QUFDbEgsdUVBQXVFO0FBQ3ZFLFdBQVc7QUFFWCw0QkFBNEI7QUFDNUIscUVBQXFFO0FBQ3JFLDZEQUE2RDtBQUM3RCxXQUFXO0FBRVgsNEVBQTRFO0FBQzVFLDBDQUEwQztBQUMxQyxpREFBaUQ7QUFDakQsNkNBQTZDO0FBQzdDLHVFQUF1RTtBQUN2RSxpREFBaUQ7QUFDakQsV0FBVztBQUVYLDJFQUEyRTtBQUMzRSwwQ0FBMEM7QUFDMUMsaURBQWlEO0FBQ2pELDZDQUE2QztBQUM3QyxzRUFBc0U7QUFDdEUsZ0RBQWdEO0FBQ2hELFdBQVc7QUFFWCwrQkFBK0I7QUFDL0Isc0VBQXNFO0FBQ3RFLDZFQUE2RTtBQUM3RSxzRUFBc0U7QUFDdEUsbURBQW1EO0FBQ25ELHdDQUF3QztBQUN4QyxzQkFBc0I7QUFDdEIscUNBQXFDO0FBQ3JDLGVBQWU7QUFDZixXQUFXO0FBRVgseUNBQXlDO0FBQ3pDLG9DQUFvQztBQUNwQyx5Q0FBeUM7QUFFekMsbUNBQW1DO0FBQ25DLFFBQVE7QUFDUixJQUFJIn0=","assetPath":"Assets/Scripts/Legacy/UIFoodShop.ts","manifest":{"properties":[],"name":"UIFoodShop","description":""},"isCompiled":true}'
  typescriptHash: e7fe6c3ba3c15e5f648b462cebbfab97
  onlyWriteTrigger: 0
