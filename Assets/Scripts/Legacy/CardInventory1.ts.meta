fileFormatVersion: 2
guid: 0e874ba6a43d7fd4a89278c41484b3e7
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: '{"source":"// import {ZepetoScriptBehaviour} from ''ZEPETO.Script''\r\n//
    import {Button, Text, ToggleGroup} from ''UnityEngine.UI''\r\n// import {GameObject,
    Object, Sprite, Transform, WaitUntil} from ''UnityEngine''\r\n// import {InventoryRecord,
    InventoryService} from \"ZEPETO.Inventory\";\r\n// import {CurrencyService} from
    \"ZEPETO.Currency\";\r\n// import {ProductRecord, ProductService, PurchaseType}
    from \"ZEPETO.Product\";\r\n// import {ZepetoWorldMultiplay} from \"ZEPETO.World\";\r\n//
    import {Room, RoomData} from \"ZEPETO.Multiplay\";\r\n// import {BalanceSync,
    InventorySync, Currency} from \"../Shop/BalanceManager\";\r\n// import CardSlot
    from ''./CardSlot'';\r\n// export default class CardInventory1 extends ZepetoScriptBehaviour
    {\r\n//     @SerializeField() private usedSlotNumTxt : Text;\r\n//     @SerializeField()
    private possessionStarTxt : Text;\r\n//     @SerializeField() private useBtn
    : Button;\r\n//     @SerializeField() private contentParent : Transform;\r\n//    
    @SerializeField() private prefItem : GameObject;\r\n//     @SerializeField()
    private itemImage : Sprite[];\r\n//     private _inventoryCache: InventoryRecord[];\r\n//    
    private _productCache: Map<string, ProductRecord> = new Map<string, ProductRecord>();\r\n//    
    private _multiplay : ZepetoWorldMultiplay;\r\n//     private _room : Room;\r\n//    
    private Start() {\r\n//         this._multiplay = Object.FindObjectOfType<ZepetoWorldMultiplay>();\r\n//        
    this._multiplay.RoomJoined += (room: Room) => {\r\n//             this._room
    = room;\r\n//             this.InitMessageHandler();\r\n//         }\r\n//        
    this.StartCoroutine(this.LoadAllItems());\r\n//     }\r\n//     private InitMessageHandler(){\r\n//        
    ProductService.OnPurchaseCompleted.AddListener((product, response) => {\r\n//            
    this.StartCoroutine(this.RefreshInventoryUI());\r\n//         });\r\n//        
    this._room.AddMessageHandler<InventorySync>(\"SyncInventories\", (message) =>
    {\r\n//             this.StartCoroutine(this.RefreshInventoryUI());\r\n//        
    });\r\n//         this.useBtn.onClick.AddListener(()=> this.OnClickEquipCard());\r\n//    
    }\r\n//     private* LoadAllItems() {\r\n//         const request = ProductService.GetProductsAsync();\r\n//        
    yield new WaitUntil(() => request.keepWaiting == false);\r\n//         if (request.responseData.isSuccess)
    {\r\n//             request.responseData.products.forEach((pr) => {\r\n//                
    this._productCache.set(pr.productId,pr);\r\n//             });\r\n//        
    }\r\n//         this.StartCoroutine(this.RefreshInventoryUI());\r\n//     }\r\n//    
    private * RefreshInventoryUI(){\r\n//         const request = InventoryService.GetListAsync();\r\n//        
    yield new WaitUntil(()=>request.keepWaiting == false);\r\n//         if(request.responseData.isSuccess)
    {\r\n//             const items: InventoryRecord[] = request.responseData.products;\r\n//            
    items.forEach((ir, index) => {\r\n//                 // If there are zero consumable
    items, delete them from the inventory.\r\n//                 if (ir.quantity
    <= 0 && this._productCache.get(ir.productId).PurchaseType == PurchaseType.Consumable)
    {\r\n//                     // remove inventory\r\n//                     const
    data = new RoomData();\r\n//                     data.Add(\"productId\", ir.productId);\r\n//                    
    this._multiplay.Room?.Send(\"onRemoveInventory\", data.GetObject());\r\n//                    
    return;\r\n//                 }\r\n//             });\r\n//             // If
    the value matches the previously received value, do not update it.\r\n//            
    if (this._inventoryCache === items) \r\n//                 return;\r\n//            
    else if (items != null && this._inventoryCache?.length == items.length) \r\n//                
    this.UpdateInventory(items);\r\n//             else\r\n//                 this.CreateInventory(items);\r\n//            
    this.usedSlotNumTxt.text = items.length.toString();\r\n//             this._inventoryCache
    = items;\r\n//         }\r\n//     }\r\n//     private UpdateInventory(items:InventoryRecord[]){\r\n//        
    const itemScripts = this.contentParent.GetComponentsInChildren<CardSlot>();\r\n//        
    items.forEach((ir)=>{\r\n//             itemScripts.forEach((itemScript)=>{\r\n//                
    if(itemScript.itemRecord.productId == ir.productId) {            \r\n//                    
    const isShowQuantity:boolean = this._productCache.get(ir.productId).PurchaseType
    == PurchaseType.Consumable;\r\n//                     itemScript.RefreshItem(ir,
    isShowQuantity);\r\n//                     return;\r\n//                 }\r\n//            
    });\r\n//         });\r\n//     }\r\n//     private CreateInventory(items :InventoryRecord[]){\r\n//        
    this.contentParent.GetComponentsInChildren<CardSlot>().forEach((child)=>{\r\n//            
    GameObject.Destroy(child.gameObject);\r\n//         });\r\n//         // Sort
    by Create Order (descending order)\r\n//         items.sort((a, b) => b.createdAt.getTime()
    - a.createdAt.getTime());\r\n//         items.forEach((ir, index) => {\r\n//            
    const itemObj = Object.Instantiate(this.prefItem, this.contentParent) as GameObject;\r\n//            
    const itemScript = itemObj.GetComponent<CardSlot>();\r\n//             this.itemImage.forEach((s,
    index) => {\r\n//                 // Import by name comparison from image resources.\r\n//                
    if (s.name == ir.productId) {\r\n//                     itemScript.itemImage.sprite
    = this.itemImage[index];\r\n//                     return;\r\n//                
    }\r\n//             });\r\n//             // Non-consumable items do not display
    numbers.\r\n//             const isShowQuantity:boolean = this._productCache.get(ir.productId).PurchaseType
    == PurchaseType.Consumable;\r\n//             itemScript.RefreshItem(ir, isShowQuantity);\r\n//            
    itemScript.isOn(index == 0);\r\n//         });\r\n//     }\r\n//     private
    OnClickEquipCard(){\r\n//         const toggleGroup = this.contentParent.GetComponent<ToggleGroup>();\r\n//        
    const item = toggleGroup.GetFirstActiveToggle()?.GetComponent<CardSlot>().itemRecord;\r\n//        
    if(item == null){\r\n//             console.warn(\"no have item data\");\r\n//            
    return;\r\n//         }\r\n//         if(this._multiplay.Room == null){\r\n//            
    console.warn(\"server disconnect\");\r\n//             return;\r\n//        
    }\r\n//         const data = new RoomData();\r\n//         data.Add(\"productId\",
    item.productId);\r\n//         data.Add(\"quantity\", 1);\r\n//         this._multiplay.Room?.Send(\"onUseInventory\",
    data.GetObject());\r\n//     }\r\n// }\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FyZEludmVudG9yeTEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJDYXJkSW52ZW50b3J5MS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzREFBc0Q7QUFDdEQsMkRBQTJEO0FBQzNELCtFQUErRTtBQUMvRSxzRUFBc0U7QUFDdEUsbURBQW1EO0FBQ25ELDhFQUE4RTtBQUM5RSxxREFBcUQ7QUFDckQsbURBQW1EO0FBQ25ELCtFQUErRTtBQUMvRSxxQ0FBcUM7QUFFckMsc0VBQXNFO0FBQ3RFLHVEQUF1RDtBQUN2RCwwREFBMEQ7QUFDMUQsaURBQWlEO0FBRWpELDJEQUEyRDtBQUMzRCx1REFBdUQ7QUFDdkQsc0RBQXNEO0FBRXRELGtEQUFrRDtBQUNsRCw0RkFBNEY7QUFDNUYsaURBQWlEO0FBQ2pELDRCQUE0QjtBQUU1Qix3QkFBd0I7QUFDeEIsNkVBQTZFO0FBQzdFLDBEQUEwRDtBQUMxRCxpQ0FBaUM7QUFDakMseUNBQXlDO0FBQ3pDLFlBQVk7QUFDWixvREFBb0Q7QUFDcEQsUUFBUTtBQUVSLG9DQUFvQztBQUNwQyxrRkFBa0Y7QUFDbEYsOERBQThEO0FBQzlELGNBQWM7QUFDZCx3RkFBd0Y7QUFDeEYsOERBQThEO0FBQzlELGNBQWM7QUFDZCx5RUFBeUU7QUFDekUsUUFBUTtBQUVSLGdDQUFnQztBQUNoQyw2REFBNkQ7QUFDN0QsbUVBQW1FO0FBQ25FLGdEQUFnRDtBQUNoRCw4REFBOEQ7QUFDOUQsMkRBQTJEO0FBQzNELGtCQUFrQjtBQUNsQixZQUFZO0FBQ1osMERBQTBEO0FBQzFELFFBQVE7QUFFUixzQ0FBc0M7QUFDdEMsMkRBQTJEO0FBQzNELGlFQUFpRTtBQUNqRSwrQ0FBK0M7QUFDL0MsOEVBQThFO0FBRTlFLDZDQUE2QztBQUM3Qyx5RkFBeUY7QUFDekYsMEhBQTBIO0FBQzFILDBDQUEwQztBQUMxQyxtREFBbUQ7QUFDbkQsMkRBQTJEO0FBQzNELHlGQUF5RjtBQUN6Riw4QkFBOEI7QUFDOUIsb0JBQW9CO0FBQ3BCLGtCQUFrQjtBQUVsQix1RkFBdUY7QUFDdkYsbURBQW1EO0FBQ25ELDBCQUEwQjtBQUMxQix1RkFBdUY7QUFDdkYsK0NBQStDO0FBQy9DLG1CQUFtQjtBQUNuQiwrQ0FBK0M7QUFFL0Msa0VBQWtFO0FBQ2xFLDRDQUE0QztBQUM1QyxZQUFZO0FBQ1osUUFBUTtBQUVSLHdEQUF3RDtBQUN4RCxzRkFBc0Y7QUFDdEYsZ0NBQWdDO0FBQ2hDLGtEQUFrRDtBQUNsRCxvRkFBb0Y7QUFDcEYsbUlBQW1JO0FBQ25JLGtFQUFrRTtBQUNsRSw4QkFBOEI7QUFDOUIsb0JBQW9CO0FBQ3BCLGtCQUFrQjtBQUNsQixjQUFjO0FBQ2QsUUFBUTtBQUVSLHlEQUF5RDtBQUN6RCxvRkFBb0Y7QUFDcEYsb0RBQW9EO0FBQ3BELGNBQWM7QUFFZCxxREFBcUQ7QUFDckQsK0VBQStFO0FBRS9FLHlDQUF5QztBQUN6QyxtR0FBbUc7QUFFbkcsbUVBQW1FO0FBQ25FLHFEQUFxRDtBQUNyRCxxRUFBcUU7QUFDckUsZ0RBQWdEO0FBQ2hELDJFQUEyRTtBQUMzRSw4QkFBOEI7QUFDOUIsb0JBQW9CO0FBQ3BCLGtCQUFrQjtBQUNsQiw4REFBOEQ7QUFDOUQsMkhBQTJIO0FBQzNILDBEQUEwRDtBQUMxRCwyQ0FBMkM7QUFDM0MsY0FBYztBQUNkLFFBQVE7QUFHUixrQ0FBa0M7QUFDbEMsOEVBQThFO0FBQzlFLGdHQUFnRztBQUVoRyw0QkFBNEI7QUFDNUIsaURBQWlEO0FBQ2pELHNCQUFzQjtBQUN0QixZQUFZO0FBQ1osNENBQTRDO0FBQzVDLGlEQUFpRDtBQUNqRCxzQkFBc0I7QUFDdEIsWUFBWTtBQUVaLHVDQUF1QztBQUN2QyxpREFBaUQ7QUFDakQsbUNBQW1DO0FBQ25DLDBFQUEwRTtBQUMxRSxRQUFRO0FBRVIsSUFBSSJ9","assetPath":"Assets/Scripts/Legacy/CardInventory1.ts","manifest":{"properties":[],"name":"CardInventory1","description":""},"isCompiled":true}'
  typescriptHash: 433f3a7d49c2c2befb395c98685e09a9
  onlyWriteTrigger: 0
