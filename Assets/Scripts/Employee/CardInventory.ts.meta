fileFormatVersion: 2
guid: a05551fcb4f9af7408e43118c9345980
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: '{"source":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\",
    { value: true });\r\nconst ZEPETO_Script_1 = require(\"ZEPETO.Script\");\r\nconst
    UnityEngine_UI_1 = require(\"UnityEngine.UI\");\r\nconst UnityEngine_1 = require(\"UnityEngine\");\r\nconst
    CardSlot_1 = require(\"./CardSlot\");\r\nconst DataManager_1 = require(\"../DataManager\");\r\nconst
    EquipSlotController_1 = require(\"./EquipSlotController\");\r\nconst CardInfoWindow_1
    = require(\"./CardInfoWindow\");\r\nconst UIManager_1 = require(\"../UIManager\");\r\nconst
    SoundManager_1 = require(\"../SoundManager\");\r\nconst Mediator_1 = require(\"../Notification/Mediator\");\r\nclass
    CardInventory extends ZEPETO_Script_1.ZepetoScriptBehaviour {\r\n    constructor()
    {\r\n        super(...arguments);\r\n        this.cardSlots = [];\r\n    }\r\n   
    Start() {\r\n        this.Init();\r\n        this.CreateInventory();\r\n       
    Mediator_1.default.GetInstance().RegisterListener(this);\r\n    }\r\n    OnDestroy()
    {\r\n        Mediator_1.default.GetInstance().UnregisterListener(this);\r\n   
    }\r\n    OnEnable() {\r\n        this.RefreshInventoryUI();\r\n        //this.RefreshCardInfo();\r\n   
    }\r\n    OnNotify(sender, eventName, eventData) {\r\n        if (!this.gameObject.activeSelf)\r\n           
    return;\r\n        if (eventName == Mediator_1.EventNames.InventoryUpdated) {\r\n           
    this.RefreshInventoryUI();\r\n        }\r\n    }\r\n    Init() {\r\n        this.equipSlotController
    = this.equipSlotControllerObj.GetComponent($typeof(EquipSlotController_1.default));\r\n       
    this.cardInfoWindow = this.cardInfoWindowObj.GetComponent($typeof(CardInfoWindow_1.default));\r\n       
    this.toggleGroup = this.contentParent.GetComponent($typeof(UnityEngine_UI_1.ToggleGroup));\r\n       
    this.equipBtn.onClick.AddListener(() => this.OnClickEquipCard());\r\n       
    this.upgradeBtn.onClick.AddListener(() => this.OnClickUpgradeCard());\r\n       
    this.cardInfoWindow.InitCardInfoWindow();\r\n    }\r\n    RefreshInventoryUI()
    {\r\n        const existingIds = [];\r\n        const inventoryCache = DataManager_1.default.GetInstance().GetInventoryCache();\r\n       
    // Update existing slots\r\n        this.cardSlots.forEach((cardSlot) => {\r\n           
    const cardId = cardSlot.GetCardData()?.GetCardId();\r\n            if (cardId)
    {\r\n                const quantity = inventoryCache.get(cardId) || 0;\r\n               
    if (quantity > 0) {\r\n                    cardSlot.RefreshItem(quantity);\r\n                   
    existingIds.push(cardId);\r\n                }\r\n                else {\r\n                   
    cardSlot.ClearSlot();\r\n                    cardSlot.gameObject.SetActive(false);\r\n               
    }\r\n            }\r\n            else {\r\n                cardSlot.gameObject.SetActive(false);\r\n           
    }\r\n        });\r\n        // Add new slots for cards that were not already
    displayed\r\n        for (const [id, quantity] of inventoryCache) {\r\n           
    if (!existingIds.includes(id) && quantity > 0) {\r\n                this.CreateSlot(id,
    quantity);\r\n            }\r\n        }\r\n        // Sort existing slots by
    grade\r\n        this.cardSlots.sort((a, b) => {\r\n            const cardGradeA
    = a.GetCardData()?.GetGrade();\r\n            const cardGradeB = b.GetCardData()?.GetGrade();\r\n           
    return this.CompareGrades(cardGradeA, cardGradeB);\r\n        });\r\n       
    // Update the size of the content to fit the number of slots\r\n        this.UpdateContentSize();\r\n   
    }\r\n    CompareGrades(gradeA, gradeB) {\r\n        // Define grade order (from
    high to low)\r\n        const gradeOrder = { s: 4, a: 3, b: 2, c: 1, d: 0 };\r\n       
    // Compare grades using the grade order\r\n        if (gradeA && gradeB) {\r\n           
    const orderA = gradeOrder[gradeA.toLowerCase()] || 0;\r\n            const orderB
    = gradeOrder[gradeB.toLowerCase()] || 0;\r\n            return orderB - orderA;
    // Sort in descending order\r\n        }\r\n        return 0;\r\n    }\r\n   
    RefreshCardInfo() {\r\n        console.warn(\"RefreshCardInfo\");\r\n       
    if (this.toggleGroup == null)\r\n            this.toggleGroup = this.contentParent.GetComponent($typeof(UnityEngine_UI_1.ToggleGroup));\r\n       
    const card = this.toggleGroup.GetFirstActiveToggle()?.GetComponent($typeof(CardSlot_1.default))?.GetCardData();\r\n       
    if (card)\r\n            this.cardInfoWindow.SetCardInfoWindow(card);\r\n   
    }\r\n    CreateInventory() {\r\n        this.cardSlots = [];\r\n        const
    remains = this.contentParent.gameObject.GetComponentsInChildren($typeof(CardSlot_1.default));\r\n       
    remains.forEach((slot) => {\r\n            console.log(slot.gameObject);\r\n           
    UnityEngine_1.GameObject.Destroy(slot.gameObject);\r\n        });\r\n       
    /*Sort by Create Order (descending order)*/\r\n        const inventoryCache =
    DataManager_1.default.GetInstance().GetInventoryCache();\r\n        for (const
    [id, quantity] of inventoryCache) {\r\n            if (quantity > 0)\r\n               
    this.CreateSlot(id, quantity);\r\n        }\r\n        // Update the size of
    the content to fit the number of slots\r\n        this.UpdateContentSize();\r\n   
    }\r\n    // Update the size of the content to fit the number of slots\r\n   
    UpdateContentSize() {\r\n        const layoutGroup = this.contentParent.GetComponent($typeof(UnityEngine_UI_1.GridLayoutGroup));\r\n       
    const cellSize = layoutGroup.cellSize;\r\n        const spacing = layoutGroup.spacing;\r\n       
    const constraintCount = layoutGroup.constraintCount;\r\n        const rowCount
    = Math.ceil(this.cardSlots.length / constraintCount);\r\n        // Cast contentParent
    to RectTransform\r\n        const contentRectTransform = this.contentParent.transform;\r\n       
    const newContentSize = new UnityEngine_1.Vector2(contentRectTransform.sizeDelta.x,
    (rowCount + 1) * (cellSize.y + spacing.y));\r\n        contentRectTransform.sizeDelta
    = newContentSize;\r\n    }\r\n    CreateSlot(id, quantity) {\r\n        let slot;\r\n       
    const inactiveSlotIndex = this.cardSlots.findIndex(s => !s.gameObject.activeSelf);\r\n       
    if (inactiveSlotIndex !== -1) { // reuse inactive slot\r\n            slot =
    this.cardSlots[inactiveSlotIndex];\r\n            slot.gameObject.SetActive(true);\r\n       
    }\r\n        else { // instantiate new slot\r\n            const cardObj = UnityEngine_1.Object.Instantiate(this.cardSlotPrefab,
    this.contentParent);\r\n            slot = cardObj.GetComponent($typeof(CardSlot_1.default));\r\n           
    const toggle = cardObj.GetComponent($typeof(UnityEngine_UI_1.Toggle));\r\n           
    toggle.group = this.toggleGroup;\r\n            toggle.onValueChanged.AddListener(()
    => {\r\n                if (toggle.isOn) {\r\n                    this.RefreshCardInfo();\r\n               
    }\r\n            });\r\n            this.cardSlots.push(slot);\r\n        }\r\n       
    const cardData = DataManager_1.default.GetInstance().GetCardData(id);\r\n       
    slot.SetSlot(cardData, quantity);\r\n        //slot.IsOn(false);\r\n    }\r\n   
    OnClickEquipCard() {\r\n        const card = this.toggleGroup.GetFirstActiveToggle()?.GetComponent($typeof(CardSlot_1.default)).GetCardData();\r\n       
    if (card == undefined) {\r\n            UIManager_1.default.GetInstance().OpenInformation(\"No
    card selected.\");\r\n            SoundManager_1.default.GetInstance().OnPlaySFX(\"Tresh\");\r\n           
    return;\r\n        }\r\n        else {\r\n            SoundManager_1.default.GetInstance().OnPlaySFX(SoundManager_1.default.GetInstance().keyBtnEquip);\r\n           
    this.equipSlotController.EquipCharacter(card);\r\n            this.RefreshInventoryUI();\r\n       
    }\r\n    }\r\n    OnClickUpgradeCard() {\r\n        const cardSlot = this.toggleGroup.GetFirstActiveToggle()?.GetComponent($typeof(CardSlot_1.default));\r\n       
    if (!cardSlot || cardSlot.GetCardQuantity() < 10) {\r\n            UIManager_1.default.GetInstance().OpenInformation(\"Not
    enough cards to Upgrade\");\r\n            SoundManager_1.default.GetInstance().OnPlaySFX(\"Tresh\");\r\n           
    return;\r\n        }\r\n        const card = cardSlot.GetCardData();\r\n       
    const grade = card.GetGrade();\r\n        if (grade == \"s\") {\r\n           
    UIManager_1.default.GetInstance().OpenInformation(\"Fully upgraded\");\r\n           
    SoundManager_1.default.GetInstance().OnPlaySFX(\"Tresh\");\r\n            return;\r\n       
    }\r\n        let upperGrade = \"c\";\r\n        switch (grade) {\r\n           
    case \"d\":\r\n                upperGrade = \"c\";\r\n                break;\r\n           
    case \"c\":\r\n                upperGrade = \"b\";\r\n                break;\r\n           
    case \"b\":\r\n                upperGrade = \"a\";\r\n                break;\r\n           
    case \"a\":\r\n                upperGrade = \"s\";\r\n                break;\r\n       
    }\r\n        const resultCard = DataManager_1.default.GetInstance().GetRandomCardByGrade(upperGrade);\r\n       
    DataManager_1.default.GetInstance().UseCard(card.GetCardId(), 10);\r\n       
    DataManager_1.default.GetInstance().AddCard(resultCard.GetCardId());\r\n       
    SoundManager_1.default.GetInstance().OnPlaySFX(\"Card_Upgrade\");\r\n       
    this.RefreshInventoryUI();\r\n    }\r\n}\r\nexports.default = CardInventory;\r\n//#
    sourceMappingURL=data:application/json;base64,","assetPath":"Assets/Scripts/Employee/CardInventory.ts","manifest":{"properties":[{"assembly":"UnityEngine.UI","name":"equipBtn","type":"UnityEngine.UI.Button","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.UI","name":"upgradeBtn","type":"UnityEngine.UI.Button","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.CoreModule","name":"contentParent","type":"UnityEngine.Transform","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.CoreModule","name":"equipSlotControllerObj","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.CoreModule","name":"cardInfoWindowObj","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.CoreModule","name":"cardSlotPrefab","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]}],"name":"CardInventory","description":""},"isCompiled":true}'
  typescriptHash: cd09baeddc2c334c9d160e54f35f5432
  onlyWriteTrigger: 0
