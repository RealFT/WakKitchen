fileFormatVersion: 2
guid: a05551fcb4f9af7408e43118c9345980
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: '{"source":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\",
    { value: true });\r\nconst ZEPETO_Script_1 = require(\"ZEPETO.Script\");\r\nconst
    UnityEngine_UI_1 = require(\"UnityEngine.UI\");\r\nconst UnityEngine_1 = require(\"UnityEngine\");\r\nconst
    CardSlot_1 = require(\"./CardSlot\");\r\nconst DataManager_1 = require(\"../DataManager\");\r\nconst
    EquipSlotController_1 = require(\"./EquipSlotController\");\r\nconst CardInfoWindow_1
    = require(\"./CardInfoWindow\");\r\nconst UIManager_1 = require(\"../UIManager\");\r\nconst
    SoundManager_1 = require(\"../SoundManager\");\r\nconst Mediator_1 = require(\"../Notification/Mediator\");\r\nconst
    HelpManager_1 = require(\"../Help/HelpManager\");\r\nclass CardInventory extends
    ZEPETO_Script_1.ZepetoScriptBehaviour {\r\n    constructor() {\r\n        super(...arguments);\r\n       
    this.cardSlots = [];\r\n    }\r\n    Start() {\r\n        this.Init();\r\n       
    this.CreateInventory();\r\n        // if(!DataManager.GetInstance().GetIsUnlockByName(\"employee\")){\r\n       
    //     this.inventoryPanel.gameObject.SetActive(false);\r\n        // }\r\n   
    }\r\n    OnDestroy() {\r\n        Mediator_1.default.GetInstance().UnregisterListener(this);\r\n   
    }\r\n    OnEnable() {\r\n        this.RefreshInventoryUI();\r\n        //this.RefreshCardInfo();\r\n   
    }\r\n    OnNotify(sender, eventName, eventData) {\r\n        if (!this.gameObject.activeSelf)\r\n           
    return;\r\n        if (eventName == Mediator_1.EventNames.InventoryUpdated) {\r\n           
    this.RefreshInventoryUI();\r\n        }\r\n    }\r\n    Init() {\r\n        this.equipSlotController
    = this.equipSlotControllerObj.GetComponent($typeof(EquipSlotController_1.default));\r\n       
    this.cardInfoWindow = this.cardInfoWindowObj.GetComponent($typeof(CardInfoWindow_1.default));\r\n       
    this.toggleGroup = this.contentParent.GetComponent($typeof(UnityEngine_UI_1.ToggleGroup));\r\n       
    this.equipBtn.onClick.AddListener(() => this.OnClickEquipCard());\r\n       
    this.upgradeBtn.onClick.AddListener(() => this.OnClickUpgradeCard());\r\n       
    this.closeBtn.onClick.AddListener(() => {\r\n            if (!this.equipSlotController.CheckSlots())
    {\r\n                SoundManager_1.default.GetInstance().OnPlayButtonSFX(\"Tresh\");\r\n               
    UIManager_1.default.GetInstance().OpenInformation(DataManager_1.default.GetInstance().GetCurrentLanguageData(\"info_require_section\"));\r\n           
    }\r\n            else {\r\n                SoundManager_1.default.GetInstance().OnPlayButtonClick();\r\n               
    UIManager_1.default.GetInstance().CloseInventoryPanel();\r\n            }\r\n       
    });\r\n        this.helpBtn.onClick.AddListener(() => HelpManager_1.default.GetInstance().OpenHelpSection(\"employee\"));\r\n       
    this.cardInfoWindow.InitCardInfoWindow();\r\n        Mediator_1.default.GetInstance().RegisterListener(this);\r\n   
    }\r\n    RefreshInventoryUI() {\r\n        const existingIds = [];\r\n       
    const inventoryCache = DataManager_1.default.GetInstance().GetInventoryCache();\r\n       
    // Update existing slots\r\n        this.cardSlots.forEach((cardSlot) => {\r\n           
    const cardId = cardSlot.GetCardData()?.GetCardId();\r\n            if (cardId)
    {\r\n                const quantity = inventoryCache.get(cardId) || 0;\r\n               
    if (quantity > 0) {\r\n                    cardSlot.RefreshItem(quantity);\r\n                   
    existingIds.push(cardId);\r\n                }\r\n                else {\r\n                   
    cardSlot.ClearSlot();\r\n                    cardSlot.gameObject.SetActive(false);\r\n               
    }\r\n            }\r\n            else {\r\n                cardSlot.gameObject.SetActive(false);\r\n           
    }\r\n        });\r\n        // Add new slots for cards that were not already
    displayed\r\n        for (const [id, quantity] of inventoryCache) {\r\n           
    if (!existingIds.includes(id) && quantity > 0) {\r\n                this.CreateSlot(id,
    quantity);\r\n            }\r\n        }\r\n        // Sort existing slots by
    grade\r\n        this.cardSlots.sort((a, b) => {\r\n            const cardGradeA
    = a.GetCardData()?.GetGrade();\r\n            const cardGradeB = b.GetCardData()?.GetGrade();\r\n           
    return this.CompareGrades(cardGradeA, cardGradeB);\r\n        });\r\n       
    this.cardSlots.forEach((slot) => {\r\n            slot.gameObject.transform.SetAsLastSibling();\r\n       
    });\r\n        // Update the size of the content to fit the number of slots\r\n       
    this.UpdateContentSize();\r\n    }\r\n    CompareGrades(gradeA, gradeB) {\r\n       
    // Define grade order (from high to low)\r\n        const gradeOrder = { s: 0,
    a: 1, b: 2, c: 3, d: 4 };\r\n        // Compare grades using the grade order\r\n       
    if (gradeA && gradeB) {\r\n            const orderA = gradeOrder[gradeA.toLowerCase()]
    || 0;\r\n            const orderB = gradeOrder[gradeB.toLowerCase()] || 0;\r\n           
    return orderB - orderA; // Sort in descending order\r\n        }\r\n        return
    0;\r\n    }\r\n    RefreshCardInfo() {\r\n        console.warn(\"RefreshCardInfo\");\r\n       
    if (this.toggleGroup == null)\r\n            this.toggleGroup = this.contentParent.GetComponent($typeof(UnityEngine_UI_1.ToggleGroup));\r\n       
    const card = this.toggleGroup.GetFirstActiveToggle()?.GetComponent($typeof(CardSlot_1.default))?.GetCardData();\r\n       
    if (card)\r\n            this.cardInfoWindow.SetCardInfoWindow(card);\r\n   
    }\r\n    CreateInventory() {\r\n        this.cardSlots = [];\r\n        const
    remains = this.contentParent.gameObject.GetComponentsInChildren($typeof(CardSlot_1.default));\r\n       
    remains.forEach((slot) => {\r\n            console.log(slot.gameObject);\r\n           
    slot.gameObject.SetActive(false);\r\n            // GameObject.Destroy(slot.gameObject);\r\n       
    });\r\n        /*Sort by Create Order (descending order)*/\r\n        const inventoryCache
    = DataManager_1.default.GetInstance().GetInventoryCache();\r\n        for (const
    [id, quantity] of inventoryCache) {\r\n            if (quantity > 0)\r\n               
    this.CreateSlot(id, quantity);\r\n        }\r\n        // Update the size of
    the content to fit the number of slots\r\n        this.UpdateContentSize();\r\n   
    }\r\n    // Update the size of the content to fit the number of slots\r\n   
    UpdateContentSize() {\r\n        const layoutGroup = this.contentParent.GetComponent($typeof(UnityEngine_UI_1.GridLayoutGroup));\r\n       
    const cellSize = layoutGroup.cellSize;\r\n        const spacing = layoutGroup.spacing;\r\n       
    const constraintCount = layoutGroup.constraintCount;\r\n        const rowCount
    = Math.ceil(this.cardSlots.length / constraintCount);\r\n        // Cast contentParent
    to RectTransform\r\n        const contentRectTransform = this.contentParent.transform;\r\n       
    const newContentSize = new UnityEngine_1.Vector2(contentRectTransform.sizeDelta.x,
    (rowCount + 1) * (cellSize.y + spacing.y));\r\n        contentRectTransform.sizeDelta
    = newContentSize;\r\n    }\r\n    CreateSlot(id, quantity) {\r\n        let slot;\r\n       
    const inactiveSlotIndex = this.cardSlots.findIndex(s => !s.gameObject.activeSelf);\r\n       
    if (inactiveSlotIndex !== -1) { // reuse inactive slot\r\n            slot =
    this.cardSlots[inactiveSlotIndex];\r\n            slot.gameObject.SetActive(true);\r\n       
    }\r\n        else { // instantiate new slot\r\n            const cardObj = UnityEngine_1.Object.Instantiate(this.cardSlotPrefab,
    this.contentParent);\r\n            slot = cardObj.GetComponent($typeof(CardSlot_1.default));\r\n           
    const toggle = cardObj.GetComponent($typeof(UnityEngine_UI_1.Toggle));\r\n           
    toggle.group = this.toggleGroup;\r\n            toggle.onValueChanged.AddListener(()
    => {\r\n                if (toggle.isOn) {\r\n                    this.RefreshCardInfo();\r\n               
    }\r\n            });\r\n            this.cardSlots.push(slot);\r\n        }\r\n       
    const cardData = DataManager_1.default.GetInstance().GetCardData(id);\r\n       
    slot.SetSlot(cardData, quantity);\r\n        //slot.IsOn(false);\r\n    }\r\n   
    OnClickEquipCard() {\r\n        const card = this.toggleGroup.GetFirstActiveToggle()?.GetComponent($typeof(CardSlot_1.default)).GetCardData();\r\n       
    if (card == undefined) {\r\n            UIManager_1.default.GetInstance().OpenInformation(DataManager_1.default.GetInstance().GetCurrentLanguageData(\"info_noselect_card\"));\r\n           
    SoundManager_1.default.GetInstance().OnPlaySFX(\"Tresh\");\r\n            return;\r\n       
    }\r\n        else {\r\n            SoundManager_1.default.GetInstance().OnPlaySFX(SoundManager_1.default.GetInstance().keyBtnEquip);\r\n           
    this.equipSlotController.EquipCharacter(card);\r\n            this.RefreshInventoryUI();\r\n       
    }\r\n    }\r\n    OnClickUpgradeCard() {\r\n        const cardSlot = this.toggleGroup.GetFirstActiveToggle()?.GetComponent($typeof(CardSlot_1.default));\r\n       
    if (!cardSlot || cardSlot.GetCardQuantity() < 10) {\r\n            UIManager_1.default.GetInstance().OpenInformation(DataManager_1.default.GetInstance().GetCurrentLanguageData(\"info_notenough_card\"));\r\n           
    SoundManager_1.default.GetInstance().OnPlaySFX(\"Tresh\");\r\n            return;\r\n       
    }\r\n        const card = cardSlot.GetCardData();\r\n        const grade = card.GetGrade();\r\n       
    if (grade == \"s\") {\r\n            UIManager_1.default.GetInstance().OpenInformation(DataManager_1.default.GetInstance().GetCurrentLanguageData(\"info_upgrade_full\"));\r\n           
    SoundManager_1.default.GetInstance().OnPlaySFX(\"Tresh\");\r\n            return;\r\n       
    }\r\n        let upperGrade = \"c\";\r\n        switch (grade) {\r\n           
    case \"d\":\r\n                upperGrade = \"c\";\r\n                break;\r\n           
    case \"c\":\r\n                upperGrade = \"b\";\r\n                break;\r\n           
    case \"b\":\r\n                upperGrade = \"a\";\r\n                break;\r\n           
    case \"a\":\r\n                upperGrade = \"s\";\r\n                break;\r\n       
    }\r\n        const resultCard = DataManager_1.default.GetInstance().GetRandomCardByGrade(upperGrade);\r\n       
    DataManager_1.default.GetInstance().UseCard(card.GetCardId(), 10);\r\n       
    DataManager_1.default.GetInstance().AddCard(resultCard.GetCardId());\r\n       
    SoundManager_1.default.GetInstance().OnPlaySFX(\"Card_Upgrade\");\r\n       
    this.RefreshInventoryUI();\r\n    }\r\n}\r\nexports.default = CardInventory;\r\n//#
    sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FyZEludmVudG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNhcmRJbnZlbnRvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBbUQ7QUFDbkQsbURBQTZFO0FBQzdFLDZDQUFtRjtBQUluRix5Q0FBa0M7QUFDbEMsZ0RBQXlDO0FBQ3pDLCtEQUF3RDtBQUN4RCxxREFBOEM7QUFDOUMsNENBQXFDO0FBQ3JDLGtEQUEyQztBQUMzQyx1REFBMkU7QUFDM0UscURBQThDO0FBRTlDLE1BQXFCLGFBQWMsU0FBUSxxQ0FBcUI7SUFBaEU7O1FBWVksY0FBUyxHQUFlLEVBQUUsQ0FBQztJQTZOdkMsQ0FBQztJQTFORyxLQUFLO1FBQ0QsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ1osSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3ZCLGdFQUFnRTtRQUNoRSx1REFBdUQ7UUFDdkQsSUFBSTtJQUNSLENBQUM7SUFFTyxTQUFTO1FBQ2Isa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRU8sUUFBUTtRQUNaLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQzFCLHlCQUF5QjtJQUM3QixDQUFDO0lBRU0sUUFBUSxDQUFDLE1BQVcsRUFBRSxTQUFpQixFQUFFLFNBQWM7UUFDMUQsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVTtZQUFFLE9BQU87UUFDeEMsSUFBSSxTQUFTLElBQUkscUJBQVUsQ0FBQyxnQkFBZ0IsRUFBRTtZQUMxQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztTQUM3QjtJQUNMLENBQUM7SUFFTyxJQUFJO1FBQ1IsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxZQUFZLFNBQUMsNkJBQW1CLEVBQUcsQ0FBQztRQUMzRixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLFNBQUMsd0JBQWMsRUFBRyxDQUFDO1FBQzVFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLFNBQUMsNEJBQVcsRUFBRyxDQUFDO1FBRWxFLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFFLEVBQUU7WUFDbEMsSUFBRyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLEVBQUUsRUFBQztnQkFDdEMsc0JBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ3BELG1CQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsZUFBZSxDQUFDLHFCQUFXLENBQUMsV0FBVyxFQUFFLENBQUMsc0JBQXNCLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO2FBQ3JIO2lCQUNHO2dCQUNBLHNCQUFZLENBQUMsV0FBVyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztnQkFDL0MsbUJBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO2FBQ2pEO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRSxFQUFFLENBQUMscUJBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUU3RixJQUFJLENBQUMsY0FBYyxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDekMsa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRU8sa0JBQWtCO1FBQ3RCLE1BQU0sV0FBVyxHQUFhLEVBQUUsQ0FBQztRQUNqQyxNQUFNLGNBQWMsR0FBRyxxQkFBVyxDQUFDLFdBQVcsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFFckUsd0JBQXdCO1FBQ3hCLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDaEMsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLFdBQVcsRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDO1lBQ25ELElBQUcsTUFBTSxFQUFFO2dCQUNQLE1BQU0sUUFBUSxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNqRCxJQUFJLFFBQVEsR0FBRyxDQUFDLEVBQUU7b0JBQ2QsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDL0IsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDNUI7cUJBQU07b0JBQ0gsUUFBUSxDQUFDLFNBQVMsRUFBRSxDQUFDO29CQUNyQixRQUFRLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDeEM7YUFDSjtpQkFDSTtnQkFDRCxRQUFRLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN4QztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsMERBQTBEO1FBQzFELEtBQUssTUFBTSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsSUFBSSxjQUFjLEVBQUU7WUFDekMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksUUFBUSxHQUFHLENBQUMsRUFBRTtnQkFDM0MsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7YUFDakM7U0FDSjtRQUVELCtCQUErQjtRQUMvQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN6QixNQUFNLFVBQVUsR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsUUFBUSxFQUFFLENBQUM7WUFDL0MsTUFBTSxVQUFVLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFLFFBQVEsRUFBRSxDQUFDO1lBQy9DLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDdEQsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBQyxFQUFFO1lBQzNCLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDakQsQ0FBQyxDQUFDLENBQUM7UUFDSCw0REFBNEQ7UUFDNUQsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVPLGFBQWEsQ0FBQyxNQUEwQixFQUFFLE1BQTBCO1FBQ3hFLHdDQUF3QztRQUN4QyxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBRXBELHVDQUF1QztRQUN2QyxJQUFJLE1BQU0sSUFBSSxNQUFNLEVBQUU7WUFDbEIsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNyRCxNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JELE9BQU8sTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDLDJCQUEyQjtTQUN0RDtRQUNELE9BQU8sQ0FBQyxDQUFDO0lBQ2IsQ0FBQztJQUNPLGVBQWU7UUFDbkIsT0FBTyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2hDLElBQUcsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJO1lBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksU0FBQyw0QkFBVyxFQUFHLENBQUM7UUFDL0YsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsRUFBRSxFQUFFLFlBQVksU0FBQyxrQkFBUSxFQUFHLEVBQUUsV0FBVyxFQUFFLENBQUM7UUFDOUYsSUFBRyxJQUFJO1lBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRU8sZUFBZTtRQUNuQixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNwQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyx1QkFBdUIsU0FBQyxrQkFBUSxFQUFHLENBQUM7UUFDbEYsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBQyxFQUFFO1lBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzdCLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2pDLHVDQUF1QztRQUMzQyxDQUFDLENBQUMsQ0FBQztRQUVILDJDQUEyQztRQUMzQyxNQUFNLGNBQWMsR0FBRyxxQkFBVyxDQUFDLFdBQVcsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDckUsS0FBSyxNQUFNLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxJQUFJLGNBQWMsRUFBRTtZQUN6QyxJQUFJLFFBQVEsR0FBRyxDQUFDO2dCQUNaLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQ3JDO1FBRUQsNERBQTREO1FBQzVELElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCw0REFBNEQ7SUFDcEQsaUJBQWlCO1FBQ3JCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxTQUFDLGdDQUFlLEVBQUcsQ0FBQztRQUN2RSxNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDO1FBQ3RDLE1BQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUM7UUFDcEMsTUFBTSxlQUFlLEdBQUcsV0FBVyxDQUFDLGVBQWUsQ0FBQztRQUNwRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLGVBQWUsQ0FBQyxDQUFDO1FBRXBFLHNDQUFzQztRQUN0QyxNQUFNLG9CQUFvQixHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBMEIsQ0FBQztRQUMzRSxNQUFNLGNBQWMsR0FBRyxJQUFJLHFCQUFPLENBQzlCLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQ2hDLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQzVDLENBQUM7UUFDRixvQkFBb0IsQ0FBQyxTQUFTLEdBQUcsY0FBYyxDQUFDO0lBQ3BELENBQUM7SUFFTyxVQUFVLENBQUMsRUFBVSxFQUFFLFFBQWdCO1FBQzNDLElBQUksSUFBYyxDQUFDO1FBQ25CLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbEYsSUFBSSxpQkFBaUIsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLHNCQUFzQjtZQUNsRCxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQ3pDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ25DO2FBQU0sRUFBRSx1QkFBdUI7WUFDNUIsTUFBTSxPQUFPLEdBQUcsb0JBQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFlLENBQUM7WUFDMUYsSUFBSSxHQUFHLE9BQU8sQ0FBQyxZQUFZLFNBQUMsa0JBQVEsRUFBRyxDQUFDO1lBQ3hDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxZQUFZLFNBQUMsdUJBQU0sRUFBRyxDQUFDO1lBQzlDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztZQUNoQyxNQUFNLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUU7Z0JBQ25DLElBQUksTUFBTSxDQUFDLElBQUksRUFBRTtvQkFDZixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7aUJBQ3hCO1lBQ0wsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM3QjtRQUVELE1BQU0sUUFBUSxHQUFHLHFCQUFXLENBQUMsV0FBVyxFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzNELElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ2pDLG1CQUFtQjtJQUN2QixDQUFDO0lBRU8sZ0JBQWdCO1FBQ3BCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxZQUFZLFNBQUMsa0JBQVEsR0FBSSxXQUFXLEVBQUUsQ0FBQztRQUM3RixJQUFJLElBQUksSUFBSSxTQUFTLEVBQUM7WUFDbEIsbUJBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxlQUFlLENBQUMscUJBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7WUFDaEgsc0JBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDOUMsT0FBTztTQUNWO2FBQ0k7WUFDRCxzQkFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxzQkFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQzdFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDOUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7U0FDN0I7SUFDTCxDQUFDO0lBRU8sa0JBQWtCO1FBQ3RCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxZQUFZLFNBQUMsa0JBQVEsRUFBRyxDQUFDO1FBQ25GLElBQUcsQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUUsRUFBQztZQUM1QyxtQkFBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxxQkFBVyxDQUFDLFdBQVcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQztZQUNqSCxzQkFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM5QyxPQUFPO1NBQ1Y7UUFDRCxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDcEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzlCLElBQUcsS0FBSyxJQUFJLEdBQUcsRUFBQztZQUNaLG1CQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsZUFBZSxDQUFDLHFCQUFXLENBQUMsV0FBVyxFQUFFLENBQUMsc0JBQXNCLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO1lBQy9HLHNCQUFZLENBQUMsV0FBVyxFQUFFLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzlDLE9BQU87U0FDVjtRQUNELElBQUksVUFBVSxHQUFHLEdBQUcsQ0FBQztRQUNyQixRQUFRLEtBQUssRUFBRTtZQUNYLEtBQUssR0FBRztnQkFDSixVQUFVLEdBQUcsR0FBRyxDQUFDO2dCQUNqQixNQUFNO1lBQ1YsS0FBSyxHQUFHO2dCQUNKLFVBQVUsR0FBRyxHQUFHLENBQUM7Z0JBQ2pCLE1BQU07WUFDVixLQUFLLEdBQUc7Z0JBQ0osVUFBVSxHQUFHLEdBQUcsQ0FBQztnQkFDakIsTUFBTTtZQUNWLEtBQUssR0FBRztnQkFDSixVQUFVLEdBQUcsR0FBRyxDQUFDO2dCQUNqQixNQUFNO1NBQ2I7UUFDRCxNQUFNLFVBQVUsR0FBRyxxQkFBVyxDQUFDLFdBQVcsRUFBRSxDQUFDLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzlFLHFCQUFXLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN4RCxxQkFBVyxDQUFDLFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUMxRCxzQkFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUM5QixDQUFDO0NBQ0o7QUF6T0QsZ0NBeU9DIn0=","assetPath":"Assets/Scripts/Employee/CardInventory.ts","manifest":{"properties":[{"assembly":"UnityEngine.UI","name":"equipBtn","type":"UnityEngine.UI.Button","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.UI","name":"upgradeBtn","type":"UnityEngine.UI.Button","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.UI","name":"closeBtn","type":"UnityEngine.UI.Button","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.UI","name":"helpBtn","type":"UnityEngine.UI.Button","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.CoreModule","name":"contentParent","type":"UnityEngine.Transform","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.CoreModule","name":"equipSlotControllerObj","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.CoreModule","name":"cardInfoWindowObj","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.CoreModule","name":"cardSlotPrefab","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]}],"name":"CardInventory","description":""},"isCompiled":true}'
  typescriptHash: c4b21c6e02fcc54906d3511ae4389c2c
  onlyWriteTrigger: 0
