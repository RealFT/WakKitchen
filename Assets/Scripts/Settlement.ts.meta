fileFormatVersion: 2
guid: 3be5c7b313a2b5a4da453620a4e110c9
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: '{"source":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\",
    { value: true });\r\nconst UnityEngine_1 = require(\"UnityEngine\");\r\nconst
    ZEPETO_Script_1 = require(\"ZEPETO.Script\");\r\nconst GameManager_1 = require(\"./GameManager\");\r\nconst
    UIManager_1 = require(\"./UIManager\");\r\nconst BalanceManager_1 = require(\"./Shop/BalanceManager\");\r\nconst
    DataManager_1 = require(\"./DataManager\");\r\nconst EmployeeManager_1 = require(\"./Employee/EmployeeManager\");\r\nconst
    SoundManager_1 = require(\"./SoundManager\");\r\nconst HelpManager_1 = require(\"./Help/HelpManager\");\r\n//
    Settlement UI class that displays information about daily profits and costs.\r\nclass
    Settlement extends ZEPETO_Script_1.ZepetoScriptBehaviour {\r\n    constructor()
    {\r\n        super(...arguments);\r\n        this.animationInProgress = false;\r\n       
    // Array of Generator functions that will be stored in the animations array.\r\n       
    // Each function animates a single UI element with a corresponding value.\r\n       
    this.animations = [\r\n            () => this.NumberAnimation(this.totalSaleMoneyText,
    this.totalSale, this.animationDuration),\r\n            () => this.NumberAnimation(this.employeeMoneyText,
    -this.employeeCost, this.animationDuration),\r\n            // () => this.NumberAnimation(this.IngredientsMoneyText,
    -this.ingredientsCost, this.animationDuration),\r\n            () => this.NumberAnimation(this.netIncomeMoneyText,
    this.netIncome, this.animationDuration)\r\n        ];\r\n    }\r\n    // Called
    when the Settlement UI is enabled.\r\n    // Resets all Text UI elements to empty
    strings and starts the AnimationSequence coroutine.\r\n    OnEnable() {\r\n       
    this.totalSaleText.text = DataManager_1.default.GetInstance().GetCurrentLanguageData(\"settlement_total\");\r\n       
    this.employeeText.text = DataManager_1.default.GetInstance().GetCurrentLanguageData(\"settlement_employee\");\r\n       
    // this.IngredientsText.text = DataManager.GetInstance().GetCurrentLanguageData(\"settlement_ingredient\");\r\n       
    this.netIncomeText.text = DataManager_1.default.GetInstance().GetCurrentLanguageData(\"settlement_netIncome\");\r\n       
    this.doubleIncomeButton.gameObject.SetActive(true);\r\n        this.ResetPriceTexts();\r\n       
    this.GetPriceInformation();\r\n        this.StartCoroutine(this.AnimationSequence());\r\n       
    SoundManager_1.default.GetInstance().OnPlayOnceBGM(SoundManager_1.default.GetInstance().keySettlement);\r\n   
    }\r\n    Start() {\r\n        this.doubleIncomeButton.onClick.AddListener(()
    => {\r\n            this.OnDoubleIncome();\r\n            SoundManager_1.default.GetInstance().OnPlayButtonSFX(\"Purchase\");\r\n       
    });\r\n        this.toShopButton.onClick.AddListener(() => {\r\n            UIManager_1.default.GetInstance().ToShop();\r\n       
    });\r\n    }\r\n    /**\r\n     * Coroutine function that animates a number on
    a Text UI element from 0 to the specified endNumber.\r\n     * @param targetText
    Text UI element that will display the animated number.\r\n     * @param endNumber
    The number that the animation will end on.\r\n     * @param duration The duration
    of the animation in seconds.\r\n     */\r\n    *NumberAnimation(targetText, endNumber,
    duration) {\r\n        let timer = 0;\r\n        while (timer < duration) {\r\n           
    const progress = timer / duration;\r\n            const currentNumber = Math.floor(UnityEngine_1.Mathf.Lerp(0,
    endNumber, progress));\r\n            targetText.text = currentNumber.toLocaleString();\r\n           
    yield new UnityEngine_1.WaitForSeconds(UnityEngine_1.Time.deltaTime);\r\n           
    timer += UnityEngine_1.Time.deltaTime;\r\n        }\r\n        targetText.text
    = `${endNumber}`;\r\n    }\r\n    //  Coroutine function that plays a sequence
    of animations stored in the animations array.\r\n    *AnimationSequence() {\r\n       
    for (const animation of this.animations) {\r\n            this.animationInProgress
    = true;\r\n            yield* animation();\r\n            this.animationInProgress
    = false;\r\n        }\r\n        if (GameManager_1.default.GetInstance().GetCurrentStage()
    == 2) {\r\n            HelpManager_1.default.GetInstance().GuideSettlement();\r\n       
    }\r\n    }\r\n    // Resets all Text UI elements to empty strings.\r\n    ResetPriceTexts()
    {\r\n        this.dateText.text = `Day ${GameManager_1.default.GetInstance().GetCurrentStage()}`;\r\n       
    this.totalSaleMoneyText.text = \"\";\r\n        this.employeeMoneyText.text =
    \"\";\r\n        // this.IngredientsMoneyText.text = \"\";\r\n        this.netIncomeMoneyText.text
    = \"\";\r\n    }\r\n    // Gets daily profit and cost information from the BalanceManager
    class and calculates net income.\r\n    GetPriceInformation() {\r\n        this.totalSale
    = BalanceManager_1.default.GetInstance().GetTotalGainBalanceHistory();\r\n       
    this.ingredientsCost = BalanceManager_1.default.GetInstance().GetTotalUseBalanceHistory();\r\n       
    this.employeeCost = EmployeeManager_1.default.GetInstance().GetTotalEmployeePay();\r\n       
    if (this.employeeCost > 0)\r\n            BalanceManager_1.default.GetInstance().UseAvailableBalance(BalanceManager_1.Currency.wak,
    this.employeeCost);\r\n        this.netIncome = this.totalSale - this.ingredientsCost
    - this.employeeCost;\r\n        this.netIncomeMoneyText.color = this.netIncome
    >= 0 ? this.totalSaleMoneyText.color : this.employeeMoneyText.color;\r\n    }\r\n   
    // Doubles the current net income and displays the result using animation.\r\n   
    OnDoubleIncome() {\r\n        if (this.animationInProgress) {\r\n           
    return; // Ignore the click event if the animation is in progress.\r\n       
    }\r\n        // Initailize wakdu stamp\r\n        let currentWakdu = DataManager_1.default.GetInstance().GetValue(\"wakdu\");\r\n       
    // if current stage is tutorial stage,\r\n        if (GameManager_1.default.GetInstance().GetCurrentStage()
    == 2) {\r\n            currentWakdu++;\r\n        }\r\n        if (currentWakdu
    > 0) {\r\n            // If wakdu stamps left, reduce one from the current count.           
    \r\n            DataManager_1.default.GetInstance().SetValue(\"wakdu\", currentWakdu
    - 1);\r\n            this.doubleIncomeButton.gameObject.SetActive(false);\r\n           
    // Double the current net income and add the previous net income as profit.\r\n           
    BalanceManager_1.default.GetInstance().GainBalance(BalanceManager_1.Currency.wak,
    this.netIncome);\r\n            this.netIncome *= 2;\r\n            // Run the
    ScoreAnimation coroutine.\r\n            this.animationInProgress = true;\r\n           
    this.StartCoroutine(this.NumberAnimation(this.netIncomeMoneyText, this.netIncome,
    this.animationDuration));\r\n        }\r\n        // If there are no more Wakdu
    stamps left, inform the user with an information popup.\r\n        else {\r\n           
    UIManager_1.default.GetInstance().OpenInformation(DataManager_1.default.GetInstance().GetCurrentLanguageData(\"info_nostamp\"));\r\n           
    return;\r\n        }\r\n    }\r\n}\r\nexports.default = Settlement;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V0dGxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlNldHRsZW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBaUU7QUFFakUsaURBQXFEO0FBQ3JELCtDQUF3QztBQUN4QywyQ0FBb0M7QUFDcEMsMERBQWlFO0FBQ2pFLCtDQUF3QztBQUN4QyxnRUFBeUQ7QUFDekQsaURBQTBDO0FBQzFDLG9EQUE2QztBQUc3QywrRUFBK0U7QUFDL0UsTUFBcUIsVUFBVyxTQUFRLHFDQUFxQjtJQUE3RDs7UUFlWSx3QkFBbUIsR0FBWSxLQUFLLENBQUM7UUFFN0MsNEVBQTRFO1FBQzVFLHlFQUF5RTtRQUNqRSxlQUFVLEdBQXdCO1lBQ3RDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1lBQzNGLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUM7WUFDOUYsd0dBQXdHO1lBQ3hHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1NBQzlGLENBQUM7SUFtSE4sQ0FBQztJQTVHRyw0Q0FBNEM7SUFDNUMsMkZBQTJGO0lBQzNGLFFBQVE7UUFDSixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksR0FBRyxxQkFBVyxDQUFDLFdBQVcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDL0YsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcscUJBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxxQkFB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","assetPath":"Assets/Scripts/Settlement.ts","manifest":{"properties":[{"assembly":"Unity.TextMeshPro","name":"dateText","type":"TMPro.TextMeshProUGUI","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"Unity.TextMeshPro","name":"totalSaleText","type":"TMPro.TextMeshProUGUI","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"Unity.TextMeshPro","name":"totalSaleMoneyText","type":"TMPro.TextMeshProUGUI","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"Unity.TextMeshPro","name":"employeeText","type":"TMPro.TextMeshProUGUI","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"Unity.TextMeshPro","name":"employeeMoneyText","type":"TMPro.TextMeshProUGUI","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"Unity.TextMeshPro","name":"netIncomeText","type":"TMPro.TextMeshProUGUI","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"Unity.TextMeshPro","name":"netIncomeMoneyText","type":"TMPro.TextMeshProUGUI","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.UI","name":"doubleIncomeButton","type":"UnityEngine.UI.Button","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.UI","name":"toShopButton","type":"UnityEngine.UI.Button","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"mscorlib","name":"animationDuration","type":"System.Single","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]}],"name":"Settlement","description":""},"isCompiled":true}'
  typescriptHash: 803c7b1a21b45eec11ab36caa0360703
  onlyWriteTrigger: 0
