fileFormatVersion: 2
guid: 7f19129ddec44064fb74c0f346343ffe
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: "{\"source\":\"\\\"use strict\\\";\\r\\nObject.defineProperty(exports,
    \\\"__esModule\\\", { value: true });\\r\\nconst ZEPETO_Script_1 = require(\\\"ZEPETO.Script\\\");\\r\\nconst
    UnityEngine_1 = require(\\\"UnityEngine\\\");\\r\\nconst DataManager_1 = require(\\\"../DataManager\\\");\\r\\nconst
    UIManager_1 = require(\\\"../UIManager\\\");\\r\\nconst SoundManager_1 = require(\\\"../SoundManager\\\");\\r\\n//
    Class for daily rewards\\r\\nclass DailyReward extends ZEPETO_Script_1.ZepetoScriptBehaviour
    {\\r\\n    constructor() {\\r\\n        super(...arguments);\\r\\n        this.rewardAmount
    = 1; // Amount of daily reward\\r\\n        this.rewardDateKey = \\\"lastRewardDate\\\";
    // Key to save the date of the last reward\\r\\n        this.wakduKey = \\\"wakdu\\\";
    // Key to save the wakdu to be awarded as a reward\\r\\n    }\\r\\n    OnEnable()
    {\\r\\n        this.contentsText.text = DataManager_1.default.GetInstance().GetCurrentLanguageData(\\\"panel_daily\\\");\\r\\n       
    this.claimButtonText.text = DataManager_1.default.GetInstance().GetCurrentLanguageData(\\\"button_claim\\\");\\r\\n       
    this.RefreshStamp();\\r\\n    }\\r\\n    Start() {\\r\\n        // Debug: Decrease
    saved date by one day for debugging purposes\\r\\n        // let debugDate: Date
    = new Date();\\r\\n        // debugDate.setDate(debugDate.getDate() - 1);\\r\\n       
    // PlayerPrefs.SetString(this.rewardDateKey, debugDate.toISOString());\\r\\n       
    // // Debug: set wakdu 1 for debugging purposes\\r\\n        // DataManager.GetInstance().SetValue(this.wakduKey,
    1);\\r\\n        // Initialize claimButton\\r\\n        this.claimButton.onClick.AddListener(()
    => {\\r\\n            this.ClaimReward();\\r\\n        });\\r\\n        // Initailize
    wakdu stamp\\r\\n        this.RefreshStamp();\\r\\n        this.CheckIfRewardClaimable();\\r\\n   
    }\\r\\n    RefreshStamp() {\\r\\n        for (const stamp of this.stampPool)
    {\\r\\n            stamp.SetActive(false);\\r\\n        }\\r\\n        let currentWakdu
    = DataManager_1.default.GetInstance().GetValue(this.wakduKey);\\r\\n        for
    (let i = 0; i < currentWakdu; i++) {\\r\\n            this.CreateWakdu();\\r\\n       
    }\\r\\n    }\\r\\n    CreateWakdu() {\\r\\n        let stamp = this.FindInactiveStamp();\\r\\n       
    if (stamp !== null) {\\r\\n            // \uBE44\uD65C\uC131\uD654\uB41C \uC624\uBE0C\uC81D\uD2B8\uAC00
    \uC788\uB294 \uACBD\uC6B0\\r\\n            stamp.SetActive(true);\\r\\n       
    }\\r\\n        else {\\r\\n            // \uBE44\uD65C\uC131\uD654\uB41C \uC624\uBE0C\uC81D\uD2B8\uAC00
    \uC5C6\uB294 \uACBD\uC6B0\\r\\n            stamp = UnityEngine_1.Object.Instantiate(this.stampPrefab,
    this.contentsParent);\\r\\n            this.stampPool.push(stamp);\\r\\n       
    }\\r\\n    }\\r\\n    FindInactiveStamp() {\\r\\n        for (const stamp of
    this.stampPool) {\\r\\n            if (!stamp.activeSelf) {\\r\\n               
    return stamp;\\r\\n            }\\r\\n        }\\r\\n        return null;\\r\\n   
    }\\r\\n    // Method to check if daily reward is claimable\\r\\n    CheckIfRewardClaimable()
    {\\r\\n        // Initialize lastRewardDate to today's date\\r\\n        let
    lastRewardDate = new Date();\\r\\n        // Check if the last reward date is
    saved in PlayerPrefs\\r\\n        if (UnityEngine_1.PlayerPrefs.HasKey(this.rewardDateKey))
    {\\r\\n            // Retrieve the saved date as a string and convert it to a
    Date object\\r\\n            const dateString = UnityEngine_1.PlayerPrefs.GetString(this.rewardDateKey);\\r\\n           
    lastRewardDate = new Date(dateString);\\r\\n        }\\r\\n        // Calculate
    the difference between the current date and the date of the last reward\\r\\n       
    const currentDate = new Date();\\r\\n        const difference = (currentDate.getTime()
    - lastRewardDate.getTime()) / (1000 * 3600 * 24);\\r\\n        // Output the
    current date, last reward date, and difference for debugging purposes\\r\\n       
    // console.log(\\\"currentDate: \\\" + currentDate.getTime());\\r\\n        //
    console.log(\\\"lastRewardDate: \\\" + lastRewardDate.getTime());\\r\\n       
    // console.log(\\\"difference: \\\" + difference);\\r\\n        // Determine
    whether the daily reward is claimable based on the difference\\r\\n        const
    isClaimable = difference >= 1;\\r\\n        // Activate or deactivate the new
    image and claim button based on claimability\\r\\n        this.newImage.gameObject.SetActive(isClaimable);\\r\\n       
    this.claimButton.interactable = isClaimable;\\r\\n        // Return whether the
    difference is greater than or equal to 1 day\\r\\n        return isClaimable;\\r\\n   
    }\\r\\n    // Method to claim daily reward\\r\\n    ClaimReward() {\\r\\n       
    const isClaimable = this.CheckIfRewardClaimable();\\r\\n        if (isClaimable)
    {\\r\\n            // Grant the daily reward\\r\\n            let currentWakdu
    = DataManager_1.default.GetInstance().GetValue(this.wakduKey);\\r\\n           
    if (currentWakdu >= 12) {\\r\\n                UIManager_1.default.GetInstance().OpenInformation(DataManager_1.default.GetInstance().GetCurrentLanguageData(\\\"info_stampfull\\\"));\\r\\n               
    return;\\r\\n            }\\r\\n            currentWakdu += this.rewardAmount;\\r\\n           
    DataManager_1.default.GetInstance().SetValue(this.wakduKey, currentWakdu);\\r\\n           
    // Update the date of the last reward\\r\\n            let currentDate = new
    Date();\\r\\n            currentDate.setHours(0);\\r\\n            currentDate.setMinutes(0);\\r\\n           
    UnityEngine_1.PlayerPrefs.SetString(this.rewardDateKey, currentDate.toISOString());\\r\\n           
    this.CreateWakdu();\\r\\n            this.newImage.gameObject.SetActive(!isClaimable);\\r\\n           
    this.claimButton.interactable = !isClaimable;\\r\\n            UIManager_1.default.GetInstance().OpenInformation(DataManager_1.default.GetInstance().GetCurrentLanguageData(\\\"info_dailygranted\\\"));\\r\\n           
    SoundManager_1.default.GetInstance().OnPlaySFX(\\\"Purchase\\\");\\r\\n       
    }\\r\\n        else {\\r\\n            UIManager_1.default.GetInstance().OpenInformation(DataManager_1.default.GetInstance().GetCurrentLanguageData(\\\"info_already_dailygranted\\\"));\\r\\n           
    SoundManager_1.default.GetInstance().OnPlaySFX(\\\"Tresh\\\");\\r\\n        }\\r\\n   
    }\\r\\n}\\r\\nexports.default = DailyReward;\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGFpbHlSZXdhcmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJEYWlseVJld2FyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUFxRDtBQUNyRCw2Q0FBeUU7QUFFekUsZ0RBQXlDO0FBQ3pDLDRDQUFxQztBQUNyQyxrREFBMkM7QUFHM0MsMEJBQTBCO0FBQzFCLE1BQXFCLFdBQVksU0FBUSxxQ0FBcUI7SUFBOUQ7O1FBQ1ksaUJBQVksR0FBVyxDQUFDLENBQUMsQ0FBQyx5QkFBeUI7UUFDbkQsa0JBQWEsR0FBVyxnQkFBZ0IsQ0FBQyxDQUFDLDBDQUEwQztRQUNwRixhQUFRLEdBQVcsT0FBTyxDQUFDLENBQUMsa0RBQWtEO0lBZ0kxRixDQUFDO0lBdkhHLFFBQVE7UUFDSixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksR0FBRyxxQkFBVyxDQUFDLFdBQVcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3pGLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxHQUFHLHFCQUFXLENBQUMsV0FBVyxFQUFFLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDN0YsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxLQUFLO1FBQ0QsK0RBQStEO1FBQy9ELG9DQUFvQztRQUNwQyw4Q0FBOEM7UUFDOUMsc0VBQXNFO1FBQ3RFLCtDQUErQztRQUMvQyx3REFBd0Q7UUFFeEQseUJBQXlCO1FBQ3pCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUU7WUFDdEMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO1FBRUgseUJBQXlCO1FBQ3pCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRU8sWUFBWTtRQUNoQixLQUFLLE1BQU0s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\",\"assetPath\":\"Assets/Scripts/Event/DailyReward.ts\",\"manifest\":{\"properties\":[{\"assembly\":\"UnityEngine.UI\",\"name\":\"claimButton\",\"type\":\"UnityEngine.UI.Button\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[{\"name\":\"SerializeField\",\"args\":[]}]},{\"assembly\":\"Unity.TextMeshPro\",\"name\":\"claimButtonText\",\"type\":\"TMPro.TextMeshProUGUI\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[{\"name\":\"SerializeField\",\"args\":[]}]},{\"assembly\":\"Unity.TextMeshPro\",\"name\":\"contentsText\",\"type\":\"TMPro.TextMeshProUGUI\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[{\"name\":\"SerializeField\",\"args\":[]}]},{\"assembly\":\"UnityEngine.UI\",\"name\":\"newImage\",\"type\":\"UnityEngine.UI.Image\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[{\"name\":\"SerializeField\",\"args\":[]}]},{\"assembly\":\"UnityEngine.CoreModule\",\"name\":\"stampPrefab\",\"type\":\"UnityEngine.GameObject\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[{\"name\":\"SerializeField\",\"args\":[]}]},{\"assembly\":\"UnityEngine.CoreModule\",\"name\":\"stampPool\",\"type\":\"UnityEngine.GameObject[]\",\"isArray\":true,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[{\"name\":\"SerializeField\",\"args\":[]}]},{\"assembly\":\"UnityEngine.CoreModule\",\"name\":\"contentsParent\",\"type\":\"UnityEngine.Transform\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[{\"name\":\"SerializeField\",\"args\":[]}]}],\"name\":\"DailyReward\",\"description\":\"\"},\"isCompiled\":true}"
  typescriptHash: 7534c5060ea33aa8f71182dc8145df46
  onlyWriteTrigger: 0
