fileFormatVersion: 2
guid: 2d4c89c1a5947c848a2c7b9e9d02c8e2
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: '{"source":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\",
    { value: true });\r\nconst ZEPETO_Script_1 = require(\"ZEPETO.Script\");\r\nconst
    UnityEngine_1 = require(\"UnityEngine\");\r\nconst ZEPETO_Product_1 = require(\"ZEPETO.Product\");\r\nconst
    UIBalances_1 = require(\"./UIBalances\");\r\nconst ItemManager_1 = require(\"../ItemManager\");\r\nclass
    UIFoodShop extends ZEPETO_Script_1.ZepetoScriptBehaviour {\r\n    constructor()
    {\r\n        super(...arguments);\r\n        this.allBtns = [];\r\n        this._itemsCache
    = [];\r\n        this._itemsPackageCache = [];\r\n    }\r\n    //private _uiBallances:
    UIBallances;\r\n    Start() {\r\n        //this._multiplay = Object.FindObjectOfType<ZepetoWorldMultiplay>();\r\n       
    //this._uiBallances = Object.FindObjectOfType<UIBallances>();\r\n        // button
    Interval\r\n        //let allBtns : Button[] = this.GetComponentsInChildren<Button>();\r\n       
    this.allBtns.forEach(btn => btn.onClick.AddListener(() => this.StartCoroutine(this.BtnInterval(btn))));\r\n       
    // this.StartCoroutine(this.LoadAllItems());\r\n        this.InitMessageHandler();\r\n       
    // this._multiplay.RoomJoined += (room: Room) => {\r\n        //     this._room
    = room;\r\n        //     this.InitMessageHandler();\r\n        // }\r\n    }\r\n   
    InitMessageHandler() {\r\n        //button listener\r\n        this.gainBalanceBtn.onClick.AddListener(()
    => ItemManager_1.default.GetInstance().GainBalance(UIBalances_1.Currency.wak,
    1000));\r\n        this.useBalanceBtn.onClick.AddListener(() => ItemManager_1.default.GetInstance().UseBalance(UIBalances_1.Currency.wak,
    100));\r\n        //sell items with id called potion1.\r\n        this.purchaseImmediatelyBtn.onClick.AddListener(()
    => this.StartCoroutine(ItemManager_1.default.GetInstance().PurchaseItemImmediately(\"food_test\")));\r\n       
    this.purchaseOfficialUIBtn.onClick.AddListener(() => {\r\n            //The first
    non-consumable item is sold through the official ui.\r\n            const nonConsumableItem
    = this._itemsCache.find(ir => ir.PurchaseType === ZEPETO_Product_1.PurchaseType.NonConsumable);\r\n           
    if (nonConsumableItem) {\r\n                //ItemManager.GetInstance().PurchaseItem(nonConsumableItem);\r\n           
    }\r\n            else {\r\n                ItemManager_1.default.GetInstance().OpenInformation(`Non-consumable
    product does not exist.`);\r\n            }\r\n        });\r\n        // log
    message handler\r\n        // this._room.AddMessageHandler<BalanceSync>(\"SyncBalances\",
    (message) => {\r\n        //     ItemManager.GetInstance().OpenInformation(`${message.currencyId}
    a Increase or decrease: ${message.quantity}`);\r\n        // });\r\n        //
    this._multiplay.Room.AddMessageHandler<InventorySync>(\"SyncInventories\", (message)
    => {\r\n        //     ItemManager.GetInstance().OpenInformation(`${message.productId}
    has been ${InventoryAction[message.inventoryAction]} in the inventory.`);\r\n       
    //     // item use sample\r\n        //     /*if(message.inventoryAction == InventoryAction.Used){\r\n       
    //         if(message.productId == \"potion1\"){\r\n        //             console.log(\"potion
    use!\");\r\n        //         }\r\n        //     }*/\r\n        // });\r\n       
    // this._room.AddMessageHandler<string>(\"DebitError\", (message) => {\r\n       
    //     ItemManager.GetInstance().OpenInformation(message);\r\n        // });\r\n       
    // ProductService.OnPurchaseCompleted.AddListener((product, response) => {\r\n       
    //     ItemManager.GetInstance().OpenInformation(`${response.productId} Purchase
    Completed`);\r\n        // });\r\n        // ProductService.OnPurchaseFailed.AddListener((product,
    response) => {\r\n        //     ItemManager.GetInstance().OpenInformation(response.message);\r\n       
    // });\r\n    }\r\n    // private* LoadAllItems() {\r\n    //     const request
    = ProductService.GetProductsAsync();\r\n    //     yield new WaitUntil(() =>
    request.keepWaiting == false);\r\n    //     if (request.responseData.isSuccess)
    {\r\n    //         this._itemsCache = [];\r\n    //         request.responseData.products.forEach((pr)
    => {\r\n    //             if (pr.ProductType == ProductType.Item) {\r\n    //                
    this._itemsCache.push(pr);\r\n    //             }\r\n    //             if (pr.ProductType
    == ProductType.ItemPackage) {\r\n    //                 this._itemsPackageCache.push(pr);\r\n   
    //             }\r\n    //         });\r\n    //         if (this._itemsCache.length
    == 0) {\r\n    //             console.warn(\"no Item information\");\r\n    //            
    return;\r\n    //         }\r\n    //     }\r\n    //     else{\r\n    //        
    console.warn(\"Product Load Failed\");\r\n    //     }\r\n    // }\r\n    //
    private OpenInformation(message:string){\r\n    //     //const inforObj = GameObject.Instantiate(this.informationPref,this.transform.parent)
    as GameObject;\r\n    //     //inforObj.GetComponentInChildren<Text>().text =
    message;\r\n    // }\r\n    // // open offical ui\r\n    // private OnClickPurchaseItem(productRecord:
    ProductRecord) {\r\n    //     //ProductService.OpenPurchaseUI(productRecord);\r\n   
    // }\r\n    // private OnClickGainBalance(currencyId: string, quantity: number)
    {\r\n    //     const data = new RoomData();\r\n    //     data.Add(\"currencyId\",
    currencyId);\r\n    //     data.Add(\"quantity\", quantity);\r\n    //     this._multiplay.Room?.Send(\"onCredit\",
    data.GetObject());\r\n    //     console.warn(\"OnClickGainBalance\");\r\n   
    // }\r\n    // private OnClickUseBalance(currencyId: string, quantity: number)
    {\r\n    //     const data = new RoomData();\r\n    //     data.Add(\"currencyId\",
    currencyId);\r\n    //     data.Add(\"quantity\", quantity);\r\n    //     this._multiplay.Room?.Send(\"onDebit\",
    data.GetObject());\r\n    //     console.warn(\"OnClickUseBalance\");\r\n   
    // }\r\n    // an immediate purchase\r\n    // private* OnClickPurchaseItemImmediately(productId:
    string) {\r\n    //     const request = ProductService.PurchaseProductAsync(productId);\r\n   
    //     yield new WaitUntil(() => request.keepWaiting == false);\r\n    //    
    if (request.responseData.isSuccess) {\r\n    //         // is purchase success\r\n   
    //     } else {\r\n    //         // is purchase fail\r\n    //     }\r\n   
    // }\r\n    *BtnInterval(btn) {\r\n        btn.interactable = false;\r\n       
    yield new UnityEngine_1.WaitForSeconds(0.2);\r\n        btn.interactable = true;\r\n   
    }\r\n}\r\nexports.default = UIFoodShop;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVUlGb29kU2hvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlVJRm9vZFNob3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBbUQ7QUFFbkQsNkNBQXlFO0FBQ3pFLG1EQUF3RjtBQUd4Riw2Q0FBZ0c7QUFDaEcsZ0RBQXlDO0FBRXpDLE1BQXFCLFVBQVcsU0FBUSxxQ0FBcUI7SUFBN0Q7O1FBQzhCLFlBQU8sR0FBYSxFQUFFLENBQUM7UUFPekMsZ0JBQVcsR0FBb0IsRUFBRSxDQUFDO1FBQ2xDLHVCQUFrQixHQUFvQixFQUFFLENBQUE7SUFpSXBELENBQUM7SUE5SEcsb0NBQW9DO0lBRTVCLEtBQUs7UUFDVCxvRUFBb0U7UUFDcEUsNkRBQTZEO1FBRTdELGtCQUFrQjtRQUNsQixrRUFBa0U7UUFDbEUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFdkcsNENBQTRDO1FBQzVDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQzFCLGtEQUFrRDtRQUNsRCx5QkFBeUI7UUFDekIsaUNBQWlDO1FBQ2pDLElBQUk7SUFDUixDQUFDO0lBRU8sa0JBQWtCO1FBQ3RCLGlCQUFpQjtRQUNqQixJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUMscUJBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxXQUFXLENBQUMscUJBQVEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN6RyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUMscUJBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FB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","assetPath":"Assets/Scripts/Shop/UIFoodShop.ts","manifest":{"properties":[{"assembly":"UnityEngine.UI","name":"allBtns","type":"UnityEngine.UI.Button[]","isArray":true,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.UI","name":"gainBalanceBtn","type":"UnityEngine.UI.Button","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.UI","name":"useBalanceBtn","type":"UnityEngine.UI.Button","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.UI","name":"purchaseOfficialUIBtn","type":"UnityEngine.UI.Button","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.UI","name":"purchaseImmediatelyBtn","type":"UnityEngine.UI.Button","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.CoreModule","name":"informationPref","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]}],"name":"UIFoodShop","description":""},"isCompiled":true}'
  typescriptHash: 941a75796d05614e050b740b359b2e78
  onlyWriteTrigger: 0
