fileFormatVersion: 2
guid: d63b0a9d883fa434c8faa505f675d91b
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: '{"source":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\",
    { value: true });\r\nconst ZEPETO_Script_1 = require(\"ZEPETO.Script\");\r\nconst
    UnityEngine_1 = require(\"UnityEngine\");\r\nconst OrderManager_1 = require(\"./OrderManager\");\r\nclass
    CookSlot extends ZEPETO_Script_1.ZepetoScriptBehaviour {\r\n    constructor()
    {\r\n        super(...arguments);\r\n        this.productOrder = []; // product
    ids in the order they were added to inventory\r\n        this.platedProducts
    = []; // an array of the indexes for plated Products\r\n    }\r\n    Start()
    {\r\n        this.init();\r\n    }\r\n    init() {\r\n        // Initialize variables\r\n       
    this.plateIndex = 0;\r\n        this.plateLimit = this.plateImages.length;\r\n       
    this.productInventory = new Map();\r\n        this.InitPlate();\r\n        //
    Initialize product slots\r\n        for (var index = 0; index < this.productButtons.length;
    index++) {\r\n            this.setupProductButton(index);\r\n        }\r\n       
    // Initialize button listeners\r\n        this.serveButton.onClick.AddListener(()
    => {\r\n            this.Serve();\r\n        });\r\n        // Update inventory
    display\r\n        this.updateInventoryDisplay();\r\n    }\r\n    // Initialize
    product slot\r\n    setupProductButton(index) {\r\n        this.productButtons[index].onClick.AddListener(()
    => {\r\n            if (this.plateLimit > this.plateIndex) {\r\n               
    // Add the clicked product to the plate and inventory   \r\n                this.productButtons[index].image.sprite
    = OrderManager_1.default.GetInstance().getProductSprite(OrderManager_1.default.GetInstance().getProduct(index));\r\n               
    this.plateImages[this.plateIndex].sprite = this.productButtons[index].image.sprite;
    // replace plate''s sprite to this sprite\r\n                this.plateImages[this.plateIndex].enabled
    = true;\r\n                this.plateIndex++;\r\n                // Add the product
    to the inventory\r\n                const product = OrderManager_1.default.GetInstance().getProduct(index);\r\n               
    if (product != -1)\r\n                    this.platedProducts.push(product);\r\n               
    UnityEngine_1.Debug.Log(\"productButtons: \" + product);\r\n            }\r\n       
    });\r\n    }\r\n    // Update the display of the product inventory\r\n    updateInventoryDisplay()
    {\r\n        // Update the productInventory count text for each item\r\n       
    for (let i = 0; i < this.productOrder.length; i++) {\r\n            let countText
    = \"\";\r\n            const ingredientIndex = this.productOrder[i];\r\n           
    // If the inventory has no more of the current product, disable the corresponding
    button\r\n            if (this.productInventory[ingredientIndex] == 0) {\r\n               
    this.setSlot(i, false);\r\n            }\r\n            else {\r\n               
    countText = this.productInventory[ingredientIndex].toString();\r\n               
    this.productCountTexts[i].text = countText;\r\n                this.setSlot(i,
    true);\r\n            }\r\n        }\r\n    }\r\n    // Add item to inventory\r\n   
    addItemToInventory(product, quantity = 1) {\r\n        // if already exist same
    product\r\n        if (this.productInventory.has(product)) {\r\n            this.productInventory.set(product,
    this.productInventory.get(product) + quantity);\r\n        }\r\n        else
    {\r\n            this.productInventory.set(product, quantity);\r\n           
    this.productOrder.push(product);\r\n        }\r\n    }\r\n    // Remove item
    from inventory\r\n    removeItemFromInventory(product, quantity = 1) {\r\n       
    if (this.productInventory.has(product)) {\r\n            const currentQuantity
    = this.productInventory.get(product);\r\n            if (currentQuantity >= quantity)
    {\r\n                this.productInventory.set(product, currentQuantity - quantity);\r\n               
    // if product doesn''t have any quantity\r\n                if (this.productInventory.get(product)
    === 0) {\r\n                    // delete product from productInventory\r\n                   
    this.productInventory.delete(product);\r\n                    const index = this.productOrder.indexOf(product);\r\n                   
    // delete product index from productOrder\r\n                    if (index >
    -1) {\r\n                        this.productOrder.splice(index, 1);\r\n                   
    }\r\n                }\r\n            }\r\n            else {\r\n               
    UnityEngine_1.Debug.Log(`Not enough ${product} in productInventory`);\r\n           
    }\r\n        }\r\n        else {\r\n            UnityEngine_1.Debug.Log(`${product}
    not found in productInventory`);\r\n        }\r\n    }\r\n    // Remove all items
    from inventory\r\n    removeAllItemsFromInventory() {\r\n        this.productInventory.clear();\r\n       
    this.productOrder = [];\r\n    }\r\n    getQuantityFromInventory(product) {\r\n       
    if (this.productInventory.has(product)) {\r\n            return this.productInventory.get(product);\r\n       
    }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n    Serve()
    {\r\n        /**/\r\n        for (let i = 0; i < this.platedProducts.length;
    i++) {\r\n            this.removeItemFromInventory(this.platedProducts[i]);\r\n       
    }\r\n        OrderManager_1.default.GetInstance().checkOrder(this.platedProducts);\r\n       
    this.InitPlate();\r\n    }\r\n    InitPlate() {\r\n        for (var images of
    this.plateImages) {\r\n            images.enabled = false;\r\n        }\r\n       
    this.plateIndex = 0;\r\n        this.platedProducts = [];\r\n    }\r\n    setSlot(index,
    value) {\r\n        this.productButtons[index].image.enabled = value;\r\n   
    }\r\n}\r\nexports.default = CookSlot;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29vay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNvb2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBcUQ7QUFDckQsNkNBQWdEO0FBRWhELGlEQUEwQztBQUcxQyxNQUFxQixRQUFTLFNBQVEscUNBQXFCO0lBQTNEOztRQVNZLGlCQUFZLEdBQWEsRUFBRSxDQUFDLENBQUMsd0RBQXdEO1FBTXJGLG1CQUFjLEdBQWEsRUFBRSxDQUFDLENBQUMsOENBQThDO0lBcUl6RixDQUFDO0lBbklHLEtBQUs7UUFDRCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVELElBQUk7UUFDQSx1QkFBdUI7UUFDdkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUMxQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxHQUFHLEVBQWtCLENBQUM7UUFDbEQsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRWpCLDJCQUEyQjtRQUMzQixLQUFLLElBQUksS0FBSyxHQUFRLENBQUMsRUFBRSxLQUFLLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDbEUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2xDO1FBRUQsOEJBQThCO1FBQzlCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUU7WUFDdEMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2pCLENBQUMsQ0FBQyxDQUFDO1FBRUgsMkJBQTJCO1FBQzNCLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFRCwwQkFBMEI7SUFDbEIsa0JBQWtCLENBQUMsS0FBYTtRQUNwQyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FB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","assetPath":"Assets/Scripts/Cook.ts","manifest":{"properties":[{"assembly":"UnityEngine.UI","name":"serveButton","type":"UnityEngine.UI.Button","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.UI","name":"productButtons","type":"UnityEngine.UI.Button[]","isArray":true,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.UI","name":"productCountTexts","type":"UnityEngine.UI.Text[]","isArray":true,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.UI","name":"plateImages","type":"UnityEngine.UI.Image[]","isArray":true,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"mscorlib","name":"plateIndex","type":"System.Single","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"mscorlib","name":"plateLimit","type":"System.Single","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]}],"name":"CookSlot","description":""},"isCompiled":true}'
  typescriptHash: 078932a74ef60e691f6935223c9083f9
  onlyWriteTrigger: 0
