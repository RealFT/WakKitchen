fileFormatVersion: 2
guid: d63b0a9d883fa434c8faa505f675d91b
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: '{"source":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\",
    { value: true });\r\nconst ZEPETO_Script_1 = require(\"ZEPETO.Script\");\r\nconst
    UnityEngine_1 = require(\"UnityEngine\");\r\nconst OrderManager_1 = require(\"./OrderManager\");\r\nclass
    CookSlot extends ZEPETO_Script_1.ZepetoScriptBehaviour {\r\n    constructor()
    {\r\n        super(...arguments);\r\n        this.productOrder = []; // product
    ids in the order they were added to inventory\r\n        this.platedProducts
    = []; // an array of the indexes for plated Products\r\n    }\r\n    Start()
    {\r\n        this.init();\r\n    }\r\n    init() {\r\n        // Initialize variables\r\n       
    this.plateIndex = 0;\r\n        this.plateLimit = this.plateImages.length;\r\n       
    this.productInventory = new Map();\r\n        this.InitPlate();\r\n        //
    Initialize product slots\r\n        for (var index = 0; index < this.productButtons.length;
    index++) {\r\n            this.setupProductButton(index);\r\n        }\r\n       
    // Initialize button listeners\r\n        this.serveButton.onClick.AddListener(()
    => {\r\n            this.Serve();\r\n        });\r\n        this.orderManager
    = OrderManager_1.default.GetInstance();\r\n        // Update inventory display\r\n       
    this.updateInventoryDisplay();\r\n    }\r\n    // Initialize product slot\r\n   
    setupProductButton(index) {\r\n        this.productButtons[index].onClick.AddListener(()
    => {\r\n            if (this.plateLimit > this.plateIndex) {\r\n               
    // Add the clicked product to the plate and inventory   \r\n                this.productButtons[index].image.sprite
    = this.orderManager.getProductSprite(this.orderManager.getProduct(index));\r\n               
    this.plateImages[this.plateIndex].sprite = this.productButtons[index].image.sprite;
    // replace plate''s sprite to this sprite\r\n                this.plateImages[this.plateIndex].enabled
    = true;\r\n                this.plateIndex++;\r\n                // Add the product
    to the inventory\r\n                const product = this.orderManager.getProduct(this.plateIndex);\r\n               
    if (product != -1)\r\n                    this.platedProducts.push(product);\r\n               
    UnityEngine_1.Debug.Log(\"productButtons: \" + product);\r\n            }\r\n       
    });\r\n    }\r\n    // Update the display of the product inventory\r\n    updateInventoryDisplay()
    {\r\n        // Update the productInventory count text for each item\r\n       
    for (let i = 0; i < this.productOrder.length; i++) {\r\n            let countText
    = \"\";\r\n            const ingredientIndex = this.productOrder[i];\r\n           
    // If the inventory has no more of the current product, disable the corresponding
    button\r\n            if (this.productInventory[ingredientIndex] == 0) {\r\n               
    this.setSlot(i, false);\r\n            }\r\n            else {\r\n               
    countText = this.productInventory[ingredientIndex].toString();\r\n               
    this.productCountTexts[i].text = countText;\r\n                this.setSlot(i,
    true);\r\n            }\r\n        }\r\n    }\r\n    // Add item to inventory\r\n   
    addItemToInventory(product, quantity = 1) {\r\n        // if already exist same
    product\r\n        if (this.productInventory.has(product)) {\r\n            this.productInventory.set(product,
    this.productInventory.get(product) + quantity);\r\n        }\r\n        else
    {\r\n            this.productInventory.set(product, quantity);\r\n           
    this.productOrder.push(product);\r\n        }\r\n    }\r\n    // Remove item
    from inventory\r\n    removeItemFromInventory(product, quantity = 1) {\r\n       
    if (this.productInventory.has(product)) {\r\n            const currentQuantity
    = this.productInventory.get(product);\r\n            if (currentQuantity >= quantity)
    {\r\n                this.productInventory.set(product, currentQuantity - quantity);\r\n               
    // if product doesn''t have any quantity\r\n                if (this.productInventory.get(product)
    === 0) {\r\n                    // delete product from productInventory\r\n                   
    this.productInventory.delete(product);\r\n                    const index = this.productOrder.indexOf(product);\r\n                   
    // delete product index from productOrder\r\n                    if (index >
    -1) {\r\n                        this.productOrder.splice(index, 1);\r\n                   
    }\r\n                }\r\n            }\r\n            else {\r\n               
    UnityEngine_1.Debug.Log(`Not enough ${product} in productInventory`);\r\n           
    }\r\n        }\r\n        else {\r\n            UnityEngine_1.Debug.Log(`${product}
    not found in productInventory`);\r\n        }\r\n    }\r\n    // Remove all items
    from inventory\r\n    removeAllItemsFromInventory() {\r\n        this.productInventory.clear();\r\n       
    this.productOrder = [];\r\n    }\r\n    getQuantityFromInventory(product) {\r\n       
    if (this.productInventory.has(product)) {\r\n            return this.productInventory.get(product);\r\n       
    }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n    Serve()
    {\r\n        /**/\r\n        this.orderManager.checkOrder(this.platedProducts);\r\n       
    this.InitPlate();\r\n    }\r\n    InitPlate() {\r\n        for (var images of
    this.plateImages) {\r\n            images.enabled = false;\r\n        }\r\n       
    this.plateIndex = 0;\r\n    }\r\n    setSlot(index, value) {\r\n        this.productButtons[index].image.enabled
    = value;\r\n    }\r\n}\r\nexports.default = CookSlot;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29vay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNvb2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBcUQ7QUFDckQsNkNBQWdEO0FBRWhELGlEQUEwQztBQUcxQyxNQUFxQixRQUFTLFNBQVEscUNBQXFCO0lBQTNEOztRQVVZLGlCQUFZLEdBQWEsRUFBRSxDQUFDLENBQUMsd0RBQXdEO1FBTXJGLG1CQUFjLEdBQWEsRUFBRSxDQUFDLENBQUMsOENBQThDO0lBbUl6RixDQUFDO0lBaklHLEtBQUs7UUFDRCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVELElBQUk7UUFDQSx1QkFBdUI7UUFDdkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUMxQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxHQUFHLEVBQWtCLENBQUM7UUFDbEQsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRWpCLDJCQUEyQjtRQUMzQixLQUFLLElBQUksS0FBSyxHQUFRLENBQUMsRUFBRSxLQUFLLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDbEUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2xDO1FBRUQsOEJBQThCO1FBQzlCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUU7WUFDdEMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2pCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFlBQVksR0FBRyxzQkFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRS9DLDJCQUEyQjtRQUMzQixJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRUQsMEJBQTBCO0lBQ2xCLGtCQUFrQixDQUFDLEtBQWE7UUFDcEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRTtZQUNoRCxJQUFJLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDbkMsd0RBQXdEO2dCQUN4RCxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNsSCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUUsd0NBQXdDO2dCQUM3SCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO2dCQUNqRCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7Z0JBRWxCLG1DQUFtQztnQkFDbkMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUM5RCxJQUFJLE9BQU8sSUFBSSxDQUFDLENBQUM7b0JBQ2IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ3RDLG1CQUFLLENBQUMsR0FBRyxDQUFDLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxDQUFDO2FBQzNDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsOENBQThDO0lBQ3RDLHNCQUFzQjtRQUMxQix1REFBdUQ7UUFDdkQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQy9DLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztZQUNuQixNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdDLHdGQUF3RjtZQUN4RixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQzdDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQzFCO2lCQUNHO2dCQUNBLFNBQVMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQzlELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDO2dCQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQzthQUN6QjtTQUNKO0lBQ0wsQ0FBQztJQUVELHdCQUF3QjtJQUNqQixrQkFBa0IsQ0FBQyxPQUFlLEVBQUUsV0FBbUIsQ0FBQztRQUMzRCxnQ0FBZ0M7UUFDaEMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3BDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUM7U0FDckY7YUFBTTtZQUNILElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQzdDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ25DO0lBQ0wsQ0FBQztJQUVELDZCQUE2QjtJQUN0Qix1QkFBdUIsQ0FBQyxPQUFlLEVBQUUsV0FBbUIsQ0FBQztRQUNoRSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDcEMsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMzRCxJQUFJLGVBQWUsSUFBSSxRQUFRLEVBQUU7Z0JBQzdCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLGVBQWUsR0FBRyxRQUFRLENBQUMsQ0FBQztnQkFDL0QsdUNBQXVDO2dCQUN2QyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUMxQyx1Q0FBdUM7b0JBQ3ZDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQ3RDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUNqRCx5Q0FBeUM7b0JBQ3pDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFO3dCQUNaLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztxQkFDdEM7aUJBQ0o7YUFDSjtpQkFBTTtnQkFDSCxtQkFBSyxDQUFDLEdBQUcsQ0FBQyxjQUFjLE9BQU8sc0JBQXNCLENBQUMsQ0FBQzthQUMxRDtTQUNKO2FBQU07WUFDSCxtQkFBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE9BQU8sZ0NBQWdDLENBQUMsQ0FBQztTQUN6RDtJQUNMLENBQUM7SUFFRCxrQ0FBa0M7SUFDM0IsMkJBQTJCO1FBQzlCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM5QixJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRU0sd0JBQXdCLENBQUMsT0FBZTtRQUMzQyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDcEMsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzdDO2FBQU07WUFDSCxPQUFPLENBQUMsQ0FBQztTQUNaO0lBQ0wsQ0FBQztJQUVELEtBQUs7UUFDRCxJQUFJO1FBQ0osSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRWxELElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsU0FBUztRQUNMLEtBQUssSUFBSSxNQUFNLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNqQyxNQUFNLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztTQUMxQjtRQUNELElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxPQUFPLENBQUMsS0FBYSxFQUFFLEtBQWM7UUFDakMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztJQUNyRCxDQUFDO0NBQ0o7QUFuSkQsMkJBbUpDIn0=","assetPath":"Assets/Scripts/Cook.ts","manifest":{"properties":[{"assembly":"UnityEngine.UI","name":"serveButton","type":"UnityEngine.UI.Button","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.UI","name":"productButtons","type":"UnityEngine.UI.Button[]","isArray":true,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.UI","name":"productCountTexts","type":"UnityEngine.UI.Text[]","isArray":true,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.UI","name":"plateImages","type":"UnityEngine.UI.Image[]","isArray":true,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"mscorlib","name":"plateIndex","type":"System.Single","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"mscorlib","name":"plateLimit","type":"System.Single","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]}],"name":"CookSlot","description":""},"isCompiled":true}'
  typescriptHash: c1be7b8bd36ab3fdd44205a23fce6dba
  onlyWriteTrigger: 0
