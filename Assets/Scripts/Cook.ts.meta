fileFormatVersion: 2
guid: d63b0a9d883fa434c8faa505f675d91b
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: '{"source":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\",
    { value: true });\r\nconst ZEPETO_Script_1 = require(\"ZEPETO.Script\");\r\nconst
    UnityEngine_1 = require(\"UnityEngine\");\r\nconst OrderManager_1 = require(\"./OrderManager\");\r\nclass
    CookSlot extends ZEPETO_Script_1.ZepetoScriptBehaviour {\r\n    constructor()
    {\r\n        super(...arguments);\r\n        this.itemIndices = []; // order
    of the Products in your inventory.\r\n        this.platedProducts = []; // an
    array of the indexes for plated Products\r\n    }\r\n    Start() {\r\n       
    this.init();\r\n    }\r\n    init() {\r\n        this.plateIndex = 0;\r\n       
    this.plateLimit = this.plateImages.length;\r\n        this.inventory = new Map();\r\n       
    this.InitPlate();\r\n        for (var index = 0; index < this.itemSlots.length;
    index++) {\r\n            this.SetIngredient(index);\r\n        }\r\n       
    this.SurveButton.onClick.AddListener(() => {\r\n            this.Serve();\r\n       
    });\r\n        this.orderInstance = OrderManager_1.default.GetInstance();\r\n       
    this.updateInventoryDisplay();\r\n    }\r\n    SetIngredient(index) {\r\n       
    this.itemSlots[index].onClick.AddListener(() => {\r\n            if (this.plateLimit
    > this.plateIndex) {\r\n                // replace plate''s sprite to this sprite\r\n               
    this.plateImages[this.plateIndex].sprite = this.itemSlots[index].image.sprite;\r\n               
    this.plateImages[this.plateIndex].enabled = true;\r\n                this.plateIndex++;\r\n               
    const product = this.orderInstance.getProduct(this.plateIndex);\r\n               
    if (product != -1)\r\n                    this.addItem(product);\r\n               
    UnityEngine_1.Debug.Log(\"itemSlots: \" + this.orderInstance.getProduct(this.plateIndex));\r\n           
    }\r\n        });\r\n    }\r\n    updateInventoryDisplay() {\r\n        // Update
    the inventory count text for each item\r\n        for (let i = 0; i < this.itemSlots.length;
    i++) {\r\n            let countText = \"\";\r\n            const itemIndex =
    this.itemIndices[i];\r\n            if (this.inventory[itemIndex] == 0) {\r\n               
    this.disableSlot(i);\r\n            }\r\n            else\r\n               
    countText = this.inventory[itemIndex].toString();\r\n            this.itemCountText[i].text
    = countText;\r\n        }\r\n    }\r\n    addItem(product, quantity = 1) {\r\n       
    // if already exist same product\r\n        if (this.inventory.has(product))
    {\r\n            this.inventory.set(product, this.inventory.get(product) + quantity);\r\n       
    }\r\n        else {\r\n            this.inventory.set(product, quantity);\r\n           
    this.itemIndices.push(product);\r\n        }\r\n    }\r\n    removeItem(product,
    quantity = 1) {\r\n        if (this.inventory.has(product)) {\r\n           
    const currentQuantity = this.inventory.get(product);\r\n            if (currentQuantity
    >= quantity) {\r\n                this.inventory.set(product, currentQuantity
    - quantity);\r\n            }\r\n            else {\r\n                UnityEngine_1.Debug.Log(`Not
    enough ${product} in inventory`);\r\n            }\r\n        }\r\n        else
    {\r\n            UnityEngine_1.Debug.Log(`${product} not found in inventory`);\r\n       
    }\r\n    }\r\n    removeAllItems() {\r\n        this.inventory.clear();\r\n       
    this.itemIndices = [];\r\n    }\r\n    getQuantity(product) {\r\n        if (this.inventory.has(product))
    {\r\n            return this.inventory.get(product);\r\n        }\r\n       
    else {\r\n            return 0;\r\n        }\r\n    }\r\n    Serve() {\r\n       
    /**/\r\n        this.orderInstance.checkOrder(this.platedProducts);\r\n       
    this.InitPlate();\r\n    }\r\n    InitPlate() {\r\n        for (var images of
    this.plateImages) {\r\n            images.enabled = false;\r\n            UnityEngine_1.Debug.Log(images.enabled);\r\n       
    }\r\n        this.plateIndex = 0;\r\n    }\r\n    disableSlot(index) {\r\n       
    this.itemSlots[index].gameObject.SetActive(false);\r\n    }\r\n}\r\nexports.default
    = CookSlot;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29vay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNvb2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBcUQ7QUFDckQsNkNBQXlEO0FBRXpELGlEQUEwQztBQUcxQyxNQUFxQixRQUFTLFNBQVEscUNBQXFCO0lBQTNEOztRQVNZLGdCQUFXLEdBQWEsRUFBRSxDQUFDLENBQUMsMkNBQTJDO1FBS3ZFLG1CQUFjLEdBQWEsRUFBRSxDQUFDLENBQUMsOENBQThDO0lBMkd6RixDQUFDO0lBekdHLEtBQUs7UUFDRCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVELElBQUk7UUFDQSxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDO1FBQzFDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxHQUFHLEVBQWtCLENBQUM7UUFDM0MsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRWpCLEtBQUssSUFBSSxLQUFLLEdBQVEsQ0FBQyxFQUFFLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUM3RCxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzdCO1FBRUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRTtZQUN0QyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDakIsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsYUFBYSxHQUFHLHNCQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFaEQsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7SUFDbEMsQ0FBQztJQUVELGFBQWEsQ0FBQyxLQUFVO1FBQ3BCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUU7WUFDM0MsSUFBSSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ25DLHdDQUF3QztnQkFDeEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztnQkFDOUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztnQkFDakQsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO2dCQUNsQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQy9ELElBQUcsT0FBTyxJQUFJLENBQUMsQ0FBQztvQkFDWixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUMxQixtQkFBSyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7YUFDN0U7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTyxzQkFBc0I7UUFDMUIsZ0RBQWdEO1FBQ2hELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM1QyxJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUM7WUFDbkIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNoQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3ZCOztnQkFFRyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNyRCxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7U0FDMUM7SUFDTCxDQUFDO0lBRU0sT0FBTyxDQUFDLE9BQWUsRUFBRSxXQUFtQixDQUFDO1FBQ2hELGdDQUFnQztRQUNoQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzdCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztTQUN2RTthQUFNO1lBQ0gsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2xDO0lBQ0wsQ0FBQztJQUVNLFVBQVUsQ0FBQyxPQUFlLEVBQUUsV0FBbUIsQ0FBQztRQUNuRCxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzdCLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3BELElBQUksZUFBZSxJQUFJLFFBQVEsRUFBRTtnQkFDN0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLGVBQWUsR0FBRyxRQUFRLENBQUMsQ0FBQzthQUMzRDtpQkFBTTtnQkFDSCxtQkFBSyxDQUFDLEdBQUcsQ0FBQyxjQUFjLE9BQU8sZUFBZSxDQUFDLENBQUM7YUFDbkQ7U0FDSjthQUFNO1lBQ0gsbUJBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLHlCQUF5QixDQUFDLENBQUM7U0FDbEQ7SUFDTCxDQUFDO0lBRU0sY0FBYztRQUNqQixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFTSxXQUFXLENBQUMsT0FBZTtRQUM5QixJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzdCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDdEM7YUFBTTtZQUNILE9BQU8sQ0FBQyxDQUFDO1NBQ1o7SUFDTCxDQUFDO0lBRUQsS0FBSztRQUNELElBQUk7UUFDSixJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFbkQsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxTQUFTO1FBQ0wsS0FBSyxJQUFJLE1BQU0sSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2pDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1lBQ3ZCLG1CQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUM3QjtRQUNELElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxXQUFXLENBQUMsS0FBWTtRQUNwQixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEQsQ0FBQztDQUNKO0FBekhELDJCQXlIQyJ9","assetPath":"Assets/Scripts/Cook.ts","manifest":{"properties":[{"assembly":"UnityEngine.UI","name":"SurveButton","type":"UnityEngine.UI.Button","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.UI","name":"itemSlots","type":"UnityEngine.UI.Button[]","isArray":true,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.UI","name":"itemCountText","type":"UnityEngine.UI.Text[]","isArray":true,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.UI","name":"plateImages","type":"UnityEngine.UI.Image[]","isArray":true,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"mscorlib","name":"plateIndex","type":"System.Single","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"mscorlib","name":"plateLimit","type":"System.Single","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]}],"name":"CookSlot","description":""},"isCompiled":true}'
  typescriptHash: 169994ab21f246aaced6a15b087595fc
  onlyWriteTrigger: 0
